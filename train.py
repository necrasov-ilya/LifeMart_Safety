"""
train.py
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–°–∫—Ä–∏–ø—Ç —Ä—É—á–Ω–æ–≥–æ / –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∞–Ω—Ç–∏-—Å–ø–∞–º –º–æ–¥–µ–ª–∏.

–ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
1. –ü–æ–¥–Ω–∏–º–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä (utils.logger).
2. –°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä `SpamClassifier`
   ‚Äì –µ—Å–ª–∏ `ml/model.pkl` —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω;
   ‚Äì –µ—Å–ª–∏ –Ω–µ—Ç, –º–æ–¥–µ–ª—å –æ–±—É—á–∏—Ç—Å—è —Å –Ω—É–ª—è –Ω–∞ data/messages.csv.
3. –Ø–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç `.train()` –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è,
   —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å –≤—Å–µ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ.
4. –í—ã–≤–æ–¥–∏—Ç –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É .pkl –∏ –±–∞–∑–æ–≤—É—é –º–µ—Ç—Ä–∏–∫—É accuracy
   (–≤–∞–ª–∏–¥–∞—Ü–∏—è train-test split–æ–º 80/20).

–ó–∞–ø—É—Å–∫:
    python train.py
"""

from __future__ import annotations

import logging
import sys
from pathlib import Path
from typing import Tuple

import pandas as pd
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

from config.config import settings
from ml.model import SpamClassifier
from utils.logger import get_logger

LOGGER = get_logger(__name__)


def evaluate(clf: SpamClassifier, test_csv: Path) -> Tuple[int, float]:
    """
    –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ accuracy –Ω–∞ hold-out (20 % –¥–∞—Ç–∞—Å–µ—Ç–∞).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (test_size, accuracy).
    """
    df = pd.read_csv(test_csv)
    X_train, X_test, y_train, y_test = train_test_split(
        df["message"], df["label"], test_size=0.2, random_state=42, stratify=df["label"]
    )
    y_pred = clf.model.predict(X_test)  # type: ignore[attr-defined]
    acc = accuracy_score(y_test, y_pred)
    return len(X_test), acc


def main() -> None:
    LOGGER.info("‚ñ∂Ô∏è  –†—É—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ‚Äî —Å—Ç–∞—Ä—Ç")
    clf = SpamClassifier(retrain_threshold=settings.RETRAIN_THRESHOLD)

    # –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–æ–±—É—á–∞–µ–º, —á—Ç–æ–±—ã –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
    clf.train()

    # –ú–∏–Ω–∏-–æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    test_size, acc = evaluate(clf, clf.dataset_path)
    LOGGER.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. Test size: %d, accuracy: %.4f", test_size, acc)
    LOGGER.info("üì¶ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: %s", clf.model_path.resolve())

    print("\n=== –ò—Ç–æ–≥ ===")
    print(f"–ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {clf.model_path.resolve()}")
    print(f"Test-accuracy –Ω–∞ {test_size} –ø—Ä–∏–º–µ—Ä–∞—Ö: {acc:.4f}")


if __name__ == "__main__":
    # –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –≤ stdout-—Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–µ (–±–µ–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞),
    # —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ root-–ª–æ–≥–≥–µ—Ä –ø–∏—à–µ—Ç —Ö–æ—Ç—è –±—ã –≤ –∫–æ–Ω—Å–æ–ª—å.
    if not logging.getLogger().handlers:
        logging.basicConfig(
            level=settings.LOG_LEVEL,
            format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
            handlers=[logging.StreamHandler(sys.stdout)],
        )
    main()
