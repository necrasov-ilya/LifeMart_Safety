from __future__ import annotations

import html
import time
from pathlib import Path

from telegram import Message, Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from config.config import settings
from core.coordinator import FilterCoordinator
from core.types import Action, AnalysisResult
from filters.keyword import KeywordFilter
from filters.tfidf import TfidfFilter
from filters.embedding import EmbeddingFilter
from services.policy import PolicyEngine
from services.dataset import DatasetManager
from bot.keyboards import moderator_keyboard, format_moderator_card
from utils.logger import get_logger

LOGGER = get_logger(__name__)

keyword_filter = KeywordFilter()
tfidf_filter = TfidfFilter()
embedding_filter = EmbeddingFilter(
    mode=settings.EMBEDDING_MODE,
    api_key=settings.MISTRAL_API_KEY
)

coordinator = FilterCoordinator(
    keyword_filter=keyword_filter,
    tfidf_filter=tfidf_filter,
    embedding_filter=embedding_filter
)

policy_engine = PolicyEngine(
    mode=settings.POLICY_MODE,
    auto_delete_threshold=settings.AUTO_DELETE_THRESHOLD,
    auto_kick_threshold=settings.AUTO_KICK_THRESHOLD,
    notify_threshold=settings.NOTIFY_THRESHOLD
)

dataset_manager = DatasetManager(
    Path(__file__).resolve().parents[1] / "data" / "messages.csv"
)

PENDING: dict[tuple[int, int], tuple[str, str, int, AnalysisResult]] = {}


def is_whitelisted(uid: int) -> bool:
    return uid in settings.WHITELIST_USER_IDS


def is_explicit_command(update: Update) -> bool:
    msg = update.effective_message
    if not msg:
        return False

    if msg.chat_id == settings.MODERATOR_CHAT_ID:
        return True

    entities = msg.entities or []
    for ent in entities:
        if ent.type == "bot_command":
            command_text = msg.text[ent.offset : ent.offset + ent.length]
            if "@" in command_text:
                return True
    return False


def get_message_link(msg: Message) -> str:
    if msg.chat.username:
        return f"https://t.me/{msg.chat.username}/{msg.message_id}"
    return f"https://t.me/c/{abs(msg.chat_id)}/{msg.message_id}"


async def announce_block(
    context: ContextTypes.DEFAULT_TYPE,
    chat_id: int,
    offender_name: str,
    by_moderator: bool,
) -> None:
    if not settings.ANNOUNCE_BLOCKS:
        return
    
    reason = "–ø–æ —Ä–µ—à–µ–Ω–∏—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞" if by_moderator else "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
    await context.bot.send_message(
        chat_id,
        f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b>{html.escape(offender_name)}</b> —É–¥–∞–ª–µ–Ω–æ {reason}.",
        parse_mode=ParseMode.HTML,
    )


async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg: Message = update.effective_message
    if not msg or not msg.from_user:
        return

    text = (msg.text or msg.caption or "").strip()
    if not text or msg.chat_id == settings.MODERATOR_CHAT_ID:
        return
    
    if is_whitelisted(msg.from_user.id):
        return
    
    analysis = await coordinator.analyze(text)
    action = policy_engine.decide_action(analysis)
    
    LOGGER.info(
        f"Message from {msg.from_user.full_name}: "
        f"avg={analysis.average_score:.2f}, action={action.value}"
    )
    
    if action == Action.APPROVE:
        return
    
    msg_link = get_message_link(msg)
    
    card = format_moderator_card(
        user_name=msg.from_user.full_name,
        text=text,
        msg_link=msg_link,
        analysis=analysis
    )
    
    await context.bot.send_message(
        settings.MODERATOR_CHAT_ID,
        card,
        reply_markup=moderator_keyboard(msg.chat_id, msg.message_id),
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True,
    )
    
    PENDING[(msg.chat_id, msg.message_id)] = (
        text,
        msg.from_user.full_name,
        msg.from_user.id,
        analysis
    )
    
    if action in (Action.DELETE, Action.KICK):
        try:
            await msg.delete()
            if action == Action.KICK:
                await context.bot.ban_chat_member(msg.chat_id, msg.from_user.id, until_date=60)
                await context.bot.unban_chat_member(msg.chat_id, msg.from_user.id)
        except Exception as e:
            LOGGER.warning(f"Failed to delete/kick: {e}")
        
        await announce_block(context, msg.chat_id, msg.from_user.full_name, by_moderator=False)
        
        if settings.ANNOUNCE_BLOCKS:
            await context.bot.send_message(
                msg.from_user.id,
                "‚ùå –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n"
                "–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –≤—Å—ë –∏—Å–ø—Ä–∞–≤–∏—Ç.",
                parse_mode=ParseMode.HTML,
            )


async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    if not q:
        return
    await q.answer()

    action, payload = q.data.split(":", 1)
    chat_id, msg_id = map(int, payload.split(":", 1))

    stored = PENDING.pop((chat_id, msg_id), None)
    if stored:
        text, offender, offender_id, analysis = stored
    else:
        text, offender, offender_id, analysis = None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", None, None

    if action == "kick":
        try:
            await context.bot.delete_message(chat_id, msg_id)
        except Exception:
            pass

        try:
            if offender_id and isinstance(offender_id, int) and offender_id > 0:
                await context.bot.ban_chat_member(chat_id, offender_id)
                info = "‚õî –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω."
            else:
                info = "‚õî –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. (–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞.)"
        except Exception as e:
            info = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}"

        await announce_block(context, chat_id, offender, by_moderator=True)

        if text:
            dataset_manager.add_sample(text, 1)
            info += " –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ –°–ü–ê–ú."

    elif action == "delete":
        try:
            await context.bot.delete_message(chat_id, msg_id)
            info = "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ."
        except Exception as e:
            info = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}"
        
        await announce_block(context, chat_id, offender, by_moderator=True)
        
        if text:
            dataset_manager.add_sample(text, 1)
            info += " –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ –°–ü–ê–ú."

    elif action == "ham":
        if text:
            dataset_manager.add_sample(text, 0)
            info = "‚úÖ –ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ù–ï —Å–ø–∞–º. –ü—Ä–∏–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω."
        else:
            info = "‚úÖ –ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ù–ï —Å–ø–∞–º."

    else:
        info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."

    await q.edit_message_reply_markup(reply_markup=None)
    await q.edit_message_text(f"<i>{html.escape(info)}</i>", parse_mode=ParseMode.HTML)
    
    if tfidf_filter.should_retrain(settings.RETRAIN_THRESHOLD):
        LOGGER.info("Retrain threshold reached, training TF-IDF model...")
        tfidf_filter.train()


async def cmd_status(update: Update, _):
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return
    
    dataset_size_kb = dataset_manager.get_size_kb()
    dataset_rows = dataset_manager.get_row_count()
    
    filters_status = []
    if keyword_filter.is_ready():
        filters_status.append("üî§ Keyword: ‚úÖ")
    else:
        filters_status.append("üî§ Keyword: ‚ùå")
    
    if tfidf_filter.is_ready():
        filters_status.append("üìà TF-IDF: ‚úÖ")
    else:
        filters_status.append("üìà TF-IDF: ‚ùå")
    
    if embedding_filter.is_ready():
        filters_status.append(f"üß† Embedding: ‚úÖ ({settings.EMBEDDING_MODE})")
    else:
        filters_status.append(f"üß† Embedding: ‚ùå ({settings.EMBEDDING_MODE})")
    
    await update.effective_message.reply_html(
        "<b>üìä –°—Ç–∞—Ç—É—Å –∞–Ω—Ç–∏—Å–ø–∞–º-—Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        f"<b>üìÅ –î–∞—Ç–∞—Å–µ—Ç:</b> <code>messages.csv</code>\n"
        f"<b>üì¶ –†–∞–∑–º–µ—Ä:</b> <code>{dataset_size_kb} –ö–∏–ë</code>\n"
        f"<b>üî¢ –ó–∞–ø–∏—Å–µ–π:</b> <code>{dataset_rows}</code>\n\n"
        "<b>üõ°Ô∏è –§–∏–ª—å—Ç—Ä—ã:</b>\n" + "\n".join(filters_status) + "\n\n"
        f"<b>ü§ñ –†–µ–∂–∏–º –ø–æ–ª–∏—Ç–∏–∫–∏:</b> <code>{settings.POLICY_MODE}</code>\n"
        f"<b>üì£ –û–±—ä—è–≤–ª–µ–Ω–∏—è:</b> <code>{'–í–ö–õ' if settings.ANNOUNCE_BLOCKS else '–í–´–ö–õ'}</code>"
    )


async def cmd_retrain(update: Update, _):
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return
    await update.effective_message.reply_text("‚è≥ –ü–µ—Ä–µ–æ–±—É—á–∞—é TF-IDF –º–æ–¥–µ–ª—å‚Ä¶")
    tfidf_filter.train()
    time.sleep(3)
    await update.effective_message.reply_text("‚úÖ –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞.")


async def cmd_start(update: Update, _):
    if not is_explicit_command(update):
        return

    user = update.effective_user
    if not user:
        return

    if is_whitelisted(user.id):
        text = (
            "‚úÖ –ê–Ω—Ç–∏-—Å–ø–∞–º –±–æ—Ç –∑–∞–ø—É—â–µ–Ω.\n"
            "–í—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä: –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )
    else:
        text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Å–ª–µ–∂—É –∑–∞ —á–∏—Å—Ç–æ—Ç–æ–π –≤ —á–∞—Ç–µ –∏ —Ñ–∏–ª—å—Ç—Ä—É—é –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "–ï—Å–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø–∞–ª–æ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é."
        )

    await update.effective_message.reply_text(text)


async def cmd_help(update: Update, _):
    if not is_explicit_command(update):
        return

    user = update.effective_user
    if not user:
        return

    if is_whitelisted(user.id):
        await update.effective_message.reply_html(
            "üìñ <b>–ü–æ–º–æ—â—å –ø–æ –∞–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç—É</b>\n\n"
            "<b>üõ°Ô∏è –†–µ–∂–∏–º—ã –ø–æ–ª–∏—Ç–∏–∫–∏:</b>\n"
            " ‚Ä¢ <code>manual</code> ‚Äî –≤—Å—ë –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
            " ‚Ä¢ <code>semi-auto</code> ‚Äî –∞–≤—Ç–æ –ø—Ä–∏ –≤—ã—Å–æ–∫–∏—Ö –æ—Ü–µ–Ω–∫–∞—Ö\n"
            " ‚Ä¢ <code>auto</code> ‚Äî –ø–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è\n\n"
            "<b>‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã:</b>\n"
            " ‚Ä¢ <b>/status</b> ‚Äî —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
            " ‚Ä¢ <b>/retrain</b> ‚Äî –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å TF-IDF –º–æ–¥–µ–ª—å\n"
            " ‚Ä¢ <b>/help</b> ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        )
    else:
        await update.effective_message.reply_html(
            "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n"
            "–Ø ‚Äî –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä <b>LifeMart</b>.\n"
            "–ü–æ–º–æ–≥–∞—é —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—É—é —Å–ø–∞–º.\n\n"
            "–ï—Å–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—á–µ–∑–ª–æ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É."
        )


def register_handlers(app: Application) -> None:
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("status", cmd_status))
    app.add_handler(CommandHandler("retrain", cmd_retrain))

    app.add_handler(CallbackQueryHandler(on_callback, pattern="^(kick|delete|ham):"))
    app.add_handler(MessageHandler(filters.TEXT | filters.CaptionRegex(".*"), on_message))
