"""
bot/handlers.py   (–ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª)

–ê–Ω—Ç–∏-—Å–ø–∞–º –±–æ—Ç –¥–ª—è —á–∞—Ç–æ–≤ LifeMart
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è .env  SPAM_POLICY  —É–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–¥–µ–π—Å—Ç–≤–∏–µ–º:

  notify  ‚Äì —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å—Ç–∞—ë—Ç—Å—è –¥–æ —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞  (default)
  delete  ‚Äì –±–æ—Ç —Å—Ä–∞–∑—É —É–¥–∞–ª—è–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  kick    ‚Äì –±–æ—Ç —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∫–∏–∫–∞–µ—Ç –∞–≤—Ç–æ—Ä–∞ (60 —Å–µ–∫)

–õ–æ–≥–∏–∫–∞
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
1.  –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí rule-based + ML ‚Üí ¬´—Å–ø–∞–º?¬ª
2.  –ï—Å–ª–∏ ¬´—Å–ø–∞–º¬ª ‚Üí –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –≤ –º–æ–¥-—á–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
     üö´ –°–ø–∞–º / ‚úÖ –ù–µ —Å–ø–∞–º
3.  –í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å SPAM_POLICY –±–æ—Ç *—Å—Ä–∞–∑—É* (–∏–ª–∏ –Ω–µ —Å—Ä–∞–∑—É) —É–¥–∞–ª—è–µ—Ç /
    –∫–∏–∫–∞–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —á–∞—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    ¬´üö´ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.¬ª
4.  –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É:
    ‚Ä¢ ¬´üö´¬ª ‚Üí –±–æ—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—É–±–ª–∏–∫—É–µ—Ç
      ¬´‚Ä¶–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ —Ä–µ—à–µ–Ω–∏—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞¬ª, –¥–æ–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä
      –≤ –¥–∞—Ç–∞—Å–µ—Ç
    ‚Ä¢ ¬´‚úÖ¬ª ‚Üí —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å—Ç–∞—ë—Ç—Å—è, –≤ –¥–∞—Ç–∞—Å–µ—Ç –ù–ò–ß–ï–ì–û –Ω–µ –ø–∏—à–µ—Ç—Å—è
"""

from __future__ import annotations

import csv
import html
import os
from pathlib import Path
from typing import Dict, Tuple

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    Update,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from config.config import settings
from ml.model import SpamClassifier
from utils.logger import get_logger

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  GLOBALS
LOGGER = get_logger(__name__)

classifier = SpamClassifier(retrain_threshold=settings.RETRAIN_THRESHOLD)

# —Ö—Ä–∞–Ω–∏–º (chat_id, msg_id) -> (text, author_full_name)
PENDING: Dict[Tuple[int, int], Tuple[str, str]] = {}

SPAM_POLICY = os.getenv("SPAM_POLICY", "notify").lower()
assert SPAM_POLICY in {"notify", "delete", "kick"}, "SPAM_POLICY must be notify|delete|kick"


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  Helper-—É—Ç–∏–ª–∏—Ç—ã
def is_whitelisted(uid: int) -> bool:
    return uid in settings.WHITELIST_USER_IDS


def kb_mod(chat_id: int, msg_id: int) -> InlineKeyboardMarkup:
    payload = f"{chat_id}:{msg_id}"
    return InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("üö´ –°–ø–∞–º", callback_data=f"spam:{payload}"),
                InlineKeyboardButton("‚úÖ –ù–µ —Å–ø–∞–º", callback_data=f"ham:{payload}"),
            ]
        ]
    )


async def _announce_block(
    context: ContextTypes.DEFAULT_TYPE,
    chat_id: int,
    offender_name: str,
    by_moderator: bool,
) -> None:
    reason = "–ø–æ —Ä–µ—à–µ–Ω–∏—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞" if by_moderator else "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
    await context.bot.send_message(
        chat_id,
        f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{html.escape(offender_name)}</b> –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ {reason}.",
        parse_mode=ParseMode.HTML,
    )


def _dataset_rows() -> int:
    try:
        with open(classifier.dataset_path, newline="", encoding="utf-8") as f:
            return sum(1 for _ in csv.reader(f)) - 1
    except FileNotFoundError:
        return 0


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  NEW MESSAGE
async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg: Message = update.effective_message
    if not msg.from_user:
        return

    text = (msg.text or msg.caption or "").strip()
    if (
        not text
        or msg.chat_id == settings.MODERATOR_CHAT_ID
        or is_whitelisted(msg.from_user.id)
    ):
        return

    hot = ("spam")
    pred = 1 if any(w in text.lower() for w in hot) else classifier.predict(text)
    if pred != 1:
        return

    LOGGER.info("‚úã SUSPECT %s‚Ä¶", text[:60])

    # ‚îÄ –∫–∞—Ä—Ç–æ—á–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    link = f"https://t.me/c/{abs(msg.chat_id)}/{msg.message_id}"
    preview = html.escape(text[:150] + ("‚Ä¶" if len(text) > 150 else ""))
    card = (
        "<b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n"
        f"üë§ <i>{html.escape(msg.from_user.full_name)}</i>\n"
        f"üîó <a href='{link}'>–ü–µ—Ä–µ–π—Ç–∏</a>\n\n{preview}"
    )
    await context.bot.send_message(
        settings.MODERATOR_CHAT_ID,
        card,
        reply_markup=kb_mod(msg.chat_id, msg.message_id),
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True,
    )

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∏–º—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    PENDING[(msg.chat_id, msg.message_id)] = (text, msg.from_user.full_name)

    # ‚îÄ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    auto_deleted = False
    if SPAM_POLICY in {"delete", "kick"}:
        try:
            await msg.delete()
            auto_deleted = True
        except Exception:
            LOGGER.warning("Cannot delete %s", msg.message_id)

    if SPAM_POLICY == "kick":
        try:
            await context.bot.ban_chat_member(msg.chat_id, msg.from_user.id, until_date=60)
            await context.bot.unban_chat_member(msg.chat_id, msg.from_user.id)
        except Exception:
            LOGGER.warning("Cannot kick %s", msg.from_user.id)

    if auto_deleted:  # –ø—É–±–ª–∏–∫—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await _announce_block(
            context,
            msg.chat_id,
            msg.from_user.full_name,
            by_moderator=False,
        )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  CALLBACK BUTTONS
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    if not q:
        return
    await q.answer()

    action, payload = q.data.split(":", 1)
    chat_id, msg_id = map(int, payload.split(":", 1))

    stored = PENDING.pop((chat_id, msg_id), None)
    text = stored[0] if stored else None
    offender = stored[1] if stored else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    if action == "spam":
        # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        try:
            await context.bot.delete_message(chat_id, msg_id)
        except Exception:
            pass

        # –æ–±—ä—è–≤–ª—è–µ–º –≤ —á–∞—Ç–µ
        await _announce_block(
            context,
            chat_id,
            offender,
            by_moderator=True,
        )

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –¥–∞—Ç–∞—Å–µ—Ç —Ç–æ–ª—å–∫–æ –∏—Å—Ç–∏–Ω–Ω—ã–π —Å–ø–∞–º
        added = text and classifier.update_dataset(text, 1)
        info = "–°–ø–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
        if added:
            info += " –ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–∞—Ç–∞—Å–µ—Ç üôÇ"

    else:  # ham
        info = "OK, —ç—Ç–æ –Ω–µ —Å–ø–∞–º."

    await q.edit_message_reply_markup(reply_markup=None)
    await q.edit_message_text(f"<i>{html.escape(info)}</i>", parse_mode=ParseMode.HTML)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ADMIN COMMANDS
async def cmd_status(update: Update, _c):
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return
    ds = Path(classifier.dataset_path)
    size_kb = ds.stat().st_size // 1024 if ds.exists() else 0
    await update.effective_message.reply_html(
        f"<b>Status</b>\n"
        f"Dataset: <code>{ds.name}</code> ‚Ä¢ <code>{size_kb} KiB</code> ‚Ä¢ "
        f"<code>{_dataset_rows()} samples</code>\n"
        f"Policy: <code>{SPAM_POLICY}</code>"
    )


async def cmd_retrain(update: Update, _c):
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return
    await update.effective_message.reply_text("‚è≥ –ü–µ—Ä–µ–æ–±—É—á–∞—é –º–æ–¥–µ–ª—å‚Ä¶")
    classifier.train()
    await update.effective_message.reply_text("‚úÖ –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞.")


async def cmd_start(update: Update, _c):
    await update.effective_message.reply_text(
        "–ê–Ω—Ç–∏-—Å–ø–∞–º –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è "
        "–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º."
    )


async def cmd_help(update: Update, _c):
    await update.effective_message.reply_text(
        "SPAM_POLICY:\n"
        " ‚Ä¢ notify ‚Äì –∂–¥–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
        " ‚Ä¢ delete ‚Äì —Å—Ä–∞–∑—É —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        " ‚Ä¢ kick   ‚Äì —É–¥–∞–ª–∏—Ç—å –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∫–∏–∫–Ω—É—Ç—å –∞–≤—Ç–æ—Ä–∞\n\n"
        "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤: /status, /retrain"
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  REGISTRATION
def register_handlers(app: Application) -> None:
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("status", cmd_status))
    app.add_handler(CommandHandler("retrain", cmd_retrain))
    app.add_handler(CallbackQueryHandler(on_callback, pattern="^(spam|ham):"))
    app.add_handler(MessageHandler(filters.TEXT | filters.CaptionRegex(".*"), on_message))
