# bot/handlers.py
from __future__ import annotations

import time
import csv
import html
from pathlib import Path
from typing import Dict, Tuple

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    Update,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from config.config import settings
from ml.model import SpamClassifier
from utils.logger import get_logger

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  GLOBALS
LOGGER = get_logger(__name__)

classifier = SpamClassifier(retrain_threshold=settings.RETRAIN_THRESHOLD)

# (chat_id, msg_id)  ->  (text, author_full_name)
PENDING: Dict[Tuple[int, int], Tuple[str, str]] = {}

SPAM_POLICY: str = settings.SPAM_POLICY          # notify | delete | kick
ANNOUNCE_BLOCKS: bool = settings.ANNOUNCE_BLOCKS


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  HELPERS
def is_whitelisted(uid: int) -> bool:
    return uid in settings.WHITELIST_USER_IDS

def is_explicit_command(update: Update) -> bool:
    msg = update.effective_message
    if not msg:
        return False

    if msg.chat_id == settings.MODERATOR_CHAT_ID:
        return True

    entities = msg.entities or []
    for ent in entities:
        if ent.type == "bot_command":
            command_text = msg.text[ent.offset : ent.offset + ent.length]
            if "@" in command_text:
                return True
    return False


def kb_mod(chat_id: int, msg_id: int) -> InlineKeyboardMarkup:
    payload = f"{chat_id}:{msg_id}"
    return InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("üö´ –°–ø–∞–º", callback_data=f"spam:{payload}"),
                InlineKeyboardButton("‚úÖ –ù–µ —Å–ø–∞–º", callback_data=f"ham:{payload}"),
            ]
        ]
    )

def _msg_link(msg: Message) -> str:

    if msg.chat.username:                                   # –ø—É–±–ª–∏—á–Ω–∞—è –≥—Ä—É–ø–ø–∞
        return f"https://t.me/{msg.chat.username}/{msg.message_id}"
    return f"https://t.me/c/{abs(msg.chat_id)}/{msg.message_id}"



async def _announce_block(
    context: ContextTypes.DEFAULT_TYPE,
    chat_id: int,
    offender_name: str,
    by_moderator: bool,
) -> None:
    """–ü—É–±–ª–∏–∫—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —á–∞—Ç–µ (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)."""
    if not ANNOUNCE_BLOCKS:
        return
    reason = "–ø–æ —Ä–µ—à–µ–Ω–∏—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞" if by_moderator else "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
    await context.bot.send_message(
        chat_id,
        f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b>{html.escape(offender_name)}</b> —É–¥–∞–ª–µ–Ω–æ {reason}.",
        parse_mode=ParseMode.HTML,
    )


def _dataset_rows() -> int:
    try:
        with open(classifier.dataset_path, newline="", encoding="utf-8") as f:
            return sum(1 for _ in csv.reader(f)) - 1
    except FileNotFoundError:
        return 0


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  MESSAGE HANDLER
async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg: Message = update.effective_message
    if not msg.from_user:
        return

    text = (msg.text or msg.caption or "").strip()
    if (
        not text
        or msg.chat_id == settings.MODERATOR_CHAT_ID
        or is_whitelisted(msg.from_user.id)
    ):
        return

    # rule-based —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ + ML-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    hot_words = ("–∑–∞—Ä–∞–±–æ—Ç", "—É–¥–∞–ª—ë–Ω–∫", "–∫–∞–∑–∏–Ω–æ", "$", "—Ä–∞–±–æ—Ç", "spam")
    pred = 1 if any(w in text.lower() for w in hot_words) else classifier.predict(text)
    if pred != 1:
        return

    LOGGER.info("‚úã SUSPECT %s‚Ä¶", text[:60])

    # ‚îÄ –∫–∞—Ä—Ç–æ—á–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    link = _msg_link(msg)
    preview = html.escape(text[:150] + ("‚Ä¶" if len(text) > 150 else ""))
    card = (
        "<b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n"
        f"üë§ <i>{html.escape(msg.from_user.full_name)}</i>\n"
        f"üîó <a href='{link}'>–ü–µ—Ä–µ–π—Ç–∏</a>\n\n{preview}"
    )
    await context.bot.send_message(
        settings.MODERATOR_CHAT_ID,
        card,
        reply_markup=kb_mod(msg.chat_id, msg.message_id),
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True,
    )

    PENDING[(msg.chat_id, msg.message_id)] = (text, msg.from_user.full_name, msg.from_user.id)

    # ‚îÄ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–µ
    auto_deleted = False
    if SPAM_POLICY in {"delete", "kick"}:
        try:
            await msg.delete()
            auto_deleted = True
        except Exception:
            LOGGER.warning("Cannot delete %s", msg.message_id)

    if SPAM_POLICY == "kick":
        try:
            await context.bot.ban_chat_member(msg.chat_id, msg.from_user.id, until_date=60)
            await context.bot.unban_chat_member(msg.chat_id, msg.from_user.id)
        except Exception:
            LOGGER.warning("Cannot kick %s", msg.from_user.id)

    if auto_deleted:
        await _announce_block(context, msg.chat_id, msg.from_user.full_name, by_moderator=False)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  CALLBACK BUTTONS
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    if not q:
        return
    await q.answer()

    action, payload = q.data.split(":", 1)
    chat_id, msg_id = map(int, payload.split(":", 1))

    stored = PENDING.pop((chat_id, msg_id), None)
    if stored:
        text, offender, offender_id = stored
    else:
        text, offender, offender_id = None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", None

    if action == "spam":
        try:
            await context.bot.delete_message(chat_id, msg_id)
        except Exception:
            pass

        try:
            if offender_id and isinstance(offender_id, int) and offender_id > 0:
                await context.bot.ban_chat_member(chat_id, offender_id)
                info = "‚õî –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω."
            else:
                info = "‚õî –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. (–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞.)"
        except Exception as e:
            info = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}"

        await _announce_block(context, chat_id, offender, by_moderator=True)

        added = text and classifier.update_dataset(text, 1)
        if added:
            info += " –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä –°–ü–ê–ú–ê üôÇ"

    elif action == "ham":
        added = text and classifier.update_dataset(text, 0)
        info = "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ù–ï —Å–ø–∞–º."
        if added:
            info += " –ü—Ä–∏–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –¥–∞—Ç–∞—Å–µ—Ç üôÇ"

    else:
        info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."

    await q.edit_message_reply_markup(reply_markup=None)
    await q.edit_message_text(f"<i>{html.escape(info)}</i>", parse_mode=ParseMode.HTML)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ADMIN COMMANDS
async def cmd_status(update: Update, _):
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return
    ds = Path(classifier.dataset_path)
    size_kb = ds.stat().st_size // 1024 if ds.exists() else 0
    await update.effective_message.reply_html(
        "<b>üìä –°—Ç–∞—Ç—É—Å –∞–Ω—Ç–∏—Å–ø–∞–º-—Å–∏—Å—Ç–µ–º—ã</b>\n\n"

        f"<b>üìÅ –î–∞—Ç–∞—Å–µ—Ç:</b> <code>{ds.name}</code> ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö\n"
        f"<b>üì¶ –†–∞–∑–º–µ—Ä:</b> <code>{size_kb} –ö–∏–ë</code> ‚Äî –æ–±—ä—ë–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞\n"
        f"<b>üî¢ –ö–æ–ª-–≤–æ –∑–∞–ø–∏—Å–µ–π:</b> <code>{_dataset_rows()} —Å—Ç—Ä–æ–∫</code> ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ (—Å–æ–æ–±—â–µ–Ω–∏–π) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n"

        f"<b>üõ°Ô∏è –ü–æ–ª–∏—Ç–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b> <code>{SPAM_POLICY}</code> ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø–∞–º–∞\n"
        f"<b>üì£ –û–±—ä—è–≤–ª–µ–Ω–∏—è –æ –±–ª–æ–∫–∞—Ö:</b> <code>{'–í–ö–õ' if ANNOUNCE_BLOCKS else '–í–´–ö–õ'}</code> ‚Äî —É–≤–µ–¥–æ–º–ª—è—Ç—å –ª–∏ —á–∞—Ç –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö"
    )

async def cmd_retrain(update: Update, _):
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return
    await update.effective_message.reply_text("‚è≥ –ü–µ—Ä–µ–æ–±—É—á–∞—é –º–æ–¥–µ–ª—å‚Ä¶")
    classifier.train()
    time.sleep(5)
    await update.effective_message.reply_text("‚úÖ –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞.")


async def cmd_policy(update: Update, _):
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return
    args = update.message.text.split(maxsplit=1)
    global SPAM_POLICY
    if len(args) == 2 and args[1].lower() in {"notify", "delete", "kick"}:
        SPAM_POLICY = args[1].lower()
        await update.message.reply_text(f"‚úÖ SPAM_POLICY = {SPAM_POLICY}")
    else:
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {SPAM_POLICY}\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /policy notify|delete|kick"
        )


async def cmd_announce(update: Update, _):
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return
    args = update.message.text.split(maxsplit=1)
    global ANNOUNCE_BLOCKS
    if len(args) == 2 and args[1].lower() in {"on", "off"}:
        ANNOUNCE_BLOCKS = args[1].lower() == "on"
        state = "–í–ö–õ" if ANNOUNCE_BLOCKS else "–í–´–ö–õ"
        await update.message.reply_text(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {state}")
    else:
        state = "–í–ö–õ" if ANNOUNCE_BLOCKS else "–í–´–ö–õ"
        await update.message.reply_text(
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å: {state}\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /announce on|off"
        )


async def cmd_start(update: Update, _):

    if not is_explicit_command(update):
        return

    user = update.effective_user
    if not user:
        return

    if is_whitelisted(user.id):
        text = (
            "‚úÖ –ê–Ω—Ç–∏-—Å–ø–∞–º –±–æ—Ç –∑–∞–ø—É—â–µ–Ω.\n"
            "–í—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä: —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )
    else:
        text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Å–ª–µ–∂—É –∑–∞ —á–∏—Å—Ç–æ—Ç–æ–π –≤ —á–∞—Ç–µ –∏ —Å–∫—Ä—ã–≤–∞—é –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "–ï—Å–ª–∏ –≤—ã —Å–ª—É—á–∞–π–Ω–æ –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –µ–≥–æ –º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é."
        )

    await update.effective_message.reply_text(text)

async def cmd_help(update: Update, _):
    if not is_explicit_command(update):
        return

    user = update.effective_user
    if not user:
        return

    if is_whitelisted(user.id):
        await update.effective_message.reply_html(
            "üìñ <b>–ü–æ–º–æ—â—å –ø–æ –∞–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç—É</b>\n\n"
            "<b>üõ°Ô∏è SPAM_POLICY</b> ‚Äî –∫–∞–∫ –±–æ—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
            " ‚Ä¢ <code>notify</code> ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å—Ç–∞—ë—Ç—Å—è, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
            " ‚Ä¢ <code>delete</code> ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
            " ‚Ä¢ <code>kick</code> ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç—Å—è, –∞–≤—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–∫–ª—é—á–∞–µ—Ç—Å—è\n\n"
            "<b>‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã:</b>\n"
            " ‚Ä¢ <b>/status</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω—Ç–∏—Å–ø–∞–º–∞\n"
            " ‚Ä¢ <b>/retrain</b> ‚Äî –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å\n"
            " ‚Ä¢ <b>/policy [—Ç–∏–ø]</b> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>/policy delete</code>)\n"
            " ‚Ä¢ <b>/announce [on/off]</b> ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö"
        )
    else:
        await update.effective_message.reply_html(
            "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n"
            "–Ø ‚Äî –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –±–µ—Å–µ–¥—ã –æ–¥–Ω–æ–≥–æ –∏–∑ —Ñ–∏–ª–∏–∞–ª–æ–≤ <b>–ñ–∏–∑–Ω—å –ú–∞—Ä—Ç</b>.\n"
            "–ü–æ–º–æ–≥–∞—é —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ—Ä—è–¥–æ–∫, —Ñ–∏–ª—å—Ç—Ä—É—é —Å–ø–∞–º –∏ —Ä–∞–±–æ—Ç–∞—é —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.\n\n"
            "–ï—Å–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—á–µ–∑–ª–æ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É."
        )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  REGISTRATION
def register_handlers(app: Application) -> None:
    app.add_handler(CommandHandler("start",    cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("status",   cmd_status))
    app.add_handler(CommandHandler("retrain",  cmd_retrain))
    app.add_handler(CommandHandler("policy",   cmd_policy))
    app.add_handler(CommandHandler("announce", cmd_announce))

    app.add_handler(CallbackQueryHandler(on_callback, pattern="^(spam|ham):"))
    app.add_handler(MessageHandler(filters.TEXT | filters.CaptionRegex(".*"), on_message))
