# bot/handlers.py
from __future__ import annotations

import time
import csv
import html
from pathlib import Path
from typing import Dict, Tuple

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    Update,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from config.config import settings
from ml.model import SpamClassifier
from utils.logger import get_logger
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
from storage.settings_manager import get_settings
from storage.message_logger import get_message_logger
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∞–Ω—Ç–∏–º–∞—Ç —Ñ–∏–ª—å—Ç—Ä
from utils.profanity_filter import profanity_filter

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  GLOBALS
LOGGER = get_logger(__name__)

classifier = SpamClassifier(retrain_threshold=settings.RETRAIN_THRESHOLD)

PENDING: Dict[Tuple[int, int], Tuple[str, str, int]] = {}

PENDING_MODERATORS: Dict[int, Tuple[int, str]] = {}

settings_manager = get_settings()
message_logger = get_message_logger()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  HELPERS
def is_whitelisted(uid: int) -> bool:
    return settings_manager.is_moderator(uid)

def is_explicit_command(update: Update) -> bool:
    msg = update.effective_message
    if not msg:
        return False

    if msg.chat_id == settings.MODERATOR_CHAT_ID:
        return True

    entities = msg.entities or []
    for ent in entities:
        if ent.type == "bot_command":
            command_text = msg.text[ent.offset : ent.offset + ent.length]
            if "@" in command_text:
                return True
    return False


def kb_mod(chat_id: int, msg_id: int) -> InlineKeyboardMarkup:
    payload = f"{chat_id}:{msg_id}"
    return InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("üö´ –°–ø–∞–º", callback_data=f"spam:{payload}"),
                InlineKeyboardButton("‚úÖ –ù–µ —Å–ø–∞–º", callback_data=f"ham:{payload}"),
            ]
        ]
    )

def kb_admin_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤."""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="menu_status"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings"),
        ],
        [
            InlineKeyboardButton("üë• –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã", callback_data="menu_moderators"),
            InlineKeyboardButton("ü§¨ –ê–Ω—Ç–∏–º–∞—Ç", callback_data="menu_profanity"),
        ],
        [
            InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_stats"),
            InlineKeyboardButton("üìù –õ–æ–≥–∏", callback_data="menu_logs"),
        ]
    ])

def kb_settings_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    policy_text = f"–ü–æ–ª–∏—Ç–∏–∫–∞: {settings_manager.spam_policy}"
    announce_text = f"–û–±—ä—è–≤–ª–µ–Ω–∏—è: {'–í–ö–õ' if settings_manager.announce_blocks else '–í–´–ö–õ'}"
    notif_text = f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–ö–õ' if settings_manager.notification_enabled else '–í–´–ö–õ'}"

    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"üõ°Ô∏è {policy_text}", callback_data="settings_policy")],
        [InlineKeyboardButton(f"üì£ {announce_text}", callback_data="settings_announce")],
        [InlineKeyboardButton(f"üîî {notif_text}", callback_data="settings_notifications")],
        [InlineKeyboardButton("üîß –ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data="settings_retrain")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]
    ])

def kb_moderators_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="mod_list")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="mod_add_help")],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="mod_remove_help")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]
    ])

def kb_profanity_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω—Ç–∏–º–∞—Ç —Ñ–∏–ª—å—Ç—Ä–æ–º."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="prof_check_help")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="prof_add_help")],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="prof_remove_help")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]
    ])

def kb_word_not_found(word: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ñ–∏–ª—å—Ç—Ä–µ."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"‚ûï –î–æ–±–∞–≤–∏—Ç—å '{word}' –≤ —Ñ–∏–ª—å—Ç—Ä", callback_data=f"add_word:{word}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
    ])


def _msg_link(msg: Message) -> str:

    if msg.chat.username:                                   # –ø—É–±–ª–∏—á–Ω–∞—è –≥—Ä—É–ø–ø–∞
        return f"https://t.me/{msg.chat.username}/{msg.message_id}"
    return f"https://t.me/c/{abs(msg.chat_id)}/{msg.message_id}"



async def _announce_block(
    context: ContextTypes.DEFAULT_TYPE,
    chat_id: int,
    offender_name: str,
    by_moderator: bool,
) -> None:
    """–ü—É–±–ª–∏–∫—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —á–∞—Ç–µ (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)."""
    if not settings_manager.announce_blocks:
        return
    reason = "–ø–æ —Ä–µ—à–µ–Ω–∏—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞" if by_moderator else "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
    await context.bot.send_message(
        chat_id,
        f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b>{html.escape(offender_name)}</b> —É–¥–∞–ª–µ–Ω–æ {reason}.",
        parse_mode=ParseMode.HTML,
    )


def _dataset_rows() -> int:
    try:
        with open(classifier.dataset_path, newline="", encoding="utf-8") as f:
            return sum(1 for _ in csv.reader(f)) - 1
    except FileNotFoundError:
        return 0


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  MESSAGE HANDLER
async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg: Message = update.effective_message
    if not msg.from_user:
        return

    text = (msg.text or msg.caption or "").strip()
    if (
        not text
        or msg.chat_id == settings.MODERATOR_CHAT_ID
        or settings_manager.is_moderator(msg.from_user.id)
    ):
        return

    # ‚îÄ –ü–†–û–í–ï–†–ö–ê –ê–ù–¢–ò–ú–ê–¢–ê
    if profanity_filter.contains_profanity(text):
        LOGGER.info("ü§¨ PROFANITY detected from %s: %s", msg.from_user.full_name, text[:30])

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞—Ç–æ–º
        try:
            await msg.delete()
            auto_deleted = True
        except Exception:
            LOGGER.warning("Cannot delete profane message %s", msg.message_id)
            auto_deleted = False

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ –º–∞—Ç–µ
        if settings_manager.notification_enabled:
            found_words = profanity_filter.get_profanity_words(text)
            link = _msg_link(msg)
            preview = html.escape(text[:100] + ("‚Ä¶" if len(text) > 100 else ""))

            card = (
                "<b>ü§¨ –û–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—Ç</b>\n"
                f"üë§ <i>{html.escape(msg.from_user.full_name)}</i>\n"
                f"üîó <a href='{link}'>–ü–µ—Ä–µ–π—Ç–∏</a>\n"
                f"üö´ –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤: {', '.join(found_words[:3])}\n\n{preview}"
            )

            await context.bot.send_message(
                settings.MODERATOR_CHAT_ID,
                card,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True,
            )

        # –û–±—ä—è–≤–ª—è–µ–º –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        if auto_deleted:
            await _announce_block(context, msg.chat_id, msg.from_user.full_name, by_moderator=False)

        # –õ–æ–≥–∏—Ä—É–µ–º
        message_logger.log_message_processed(
            message=msg,
            spam_probability=1.0,  # –ú–∞—Ç = 100% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            predicted_label="profanity",
            action_taken="delete"
        )
        return

    # ‚îÄ –ü–†–û–í–ï–†–ö–ê –°–ü–ê–ú–ê (—É–±–∏—Ä–∞–µ–º –ø–æ—Ä–æ–≥ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è)
    # rule-based —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ + ML-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    hot_words = ("–∑–∞—Ä–∞–±–æ—Ç", "—É–¥–∞–ª—ë–Ω–∫", "–∫–∞–∑–∏–Ω–æ", "$", "—Ä–∞–±–æ—Ç", "spam")
    has_hot_words = any(w in text.lower() for w in hot_words)

    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞ –æ—Ç ML-–º–æ–¥–µ–ª–∏
    spam_probability = classifier.predict_proba(text) if hasattr(classifier, 'predict_proba') else 0.5
    pred = 1 if has_hot_words else classifier.predict(text)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–∫—É –∏ –¥–µ–π—Å—Ç–≤–∏–µ
    predicted_label = "spam" if pred == 1 else "ham"
    action_taken = "none"

    if pred != 1:
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –ù–ï —Å–ø–∞–º
        message_logger.log_message_processed(
            message=msg,
            spam_probability=spam_probability,
            predicted_label=predicted_label,
            action_taken=action_taken
        )
        return

    LOGGER.info("‚úã SUSPECT %s‚Ä¶", text[:60])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–µ (–±–µ–∑ –ø–æ—Ä–æ–≥–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è)
    spam_policy = settings_manager.spam_policy
    if spam_policy == "delete":
        action_taken = "delete"
    elif spam_policy == "kick":
        action_taken = "kick"
    else:
        action_taken = "notify"

    # ‚îÄ –∫–∞—Ä—Ç–æ—á–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    if settings_manager.notification_enabled:
        link = _msg_link(msg)
        preview = html.escape(text[:150] + ("‚Ä¶" if len(text) > 150 else ""))
        card = (
            "<b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n"
            f"üë§ <i>{html.escape(msg.from_user.full_name)}</i>\n"
            f"üîó <a href='{link}'>–ü–µ—Ä–µ–π—Ç–∏</a>\n"
            f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞: {spam_probability:.2%}\n\n{preview}"
        )
        await context.bot.send_message(
            settings.MODERATOR_CHAT_ID,
            card,
            reply_markup=kb_mod(msg.chat_id, msg.message_id),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )

    PENDING[(msg.chat_id, msg.message_id)] = (text, msg.from_user.full_name, msg.from_user.id)

    # ‚îÄ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–µ
    auto_deleted = False
    if spam_policy in {"delete", "kick"}:
        try:
            await msg.delete()
            auto_deleted = True
        except Exception:
            LOGGER.warning("Cannot delete %s", msg.message_id)

    if spam_policy == "kick":
        try:
            await context.bot.ban_chat_member(msg.chat_id, msg.from_user.id, until_date=60)
            await context.bot.unban_chat_member(msg.chat_id, msg.from_user.id)
        except Exception:
            LOGGER.warning("Cannot kick %s", msg.from_user.id)

    if auto_deleted:
        await _announce_block(context, msg.chat_id, msg.from_user.full_name, by_moderator=False)

    # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_logger.log_message_processed(
        message=msg,
        spam_probability=spam_probability,
        predicted_label=predicted_label,
        action_taken=action_taken
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  CALLBACK BUTTONS
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    if not q:
        return
    await q.answer()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if q.data == "menu_main":
        await q.edit_message_text(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            parse_mode=ParseMode.HTML,
            reply_markup=kb_admin_menu()
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Å—Ç–∞—Ç—É—Å–∞
    if q.data == "menu_status":
        ds = Path(classifier.dataset_path)
        size_kb = ds.stat().st_size // 1024 if ds.exists() else 0
        accuracy_stats = message_logger.get_model_accuracy_stats(days=7)
        profanity_stats = message_logger.get_profanity_stats(days=7)

        await q.edit_message_text(
            f"<b>üìä –°—Ç–∞—Ç—É—Å –∞–Ω—Ç–∏—Å–ø–∞–º-—Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            f"<b>üìÅ –î–∞—Ç–∞—Å–µ—Ç:</b> <code>{ds.name}</code>\n"
            f"<b>üì¶ –†–∞–∑–º–µ—Ä:</b> <code>{size_kb} –ö–∏–ë</code>\n"
            f"<b>üî¢ –ó–∞–ø–∏—Å–µ–π:</b> <code>{_dataset_rows()}</code>\n\n"
            f"<b>üõ°Ô∏è –ü–æ–ª–∏—Ç–∏–∫–∞:</b> <code>{settings_manager.spam_policy}</code>\n"
            f"<b>üì£ –û–±—ä—è–≤–ª–µ–Ω–∏—è:</b> <code>{'–í–ö–õ' if settings_manager.announce_blocks else '–í–´–ö–õ'}</code>\n"
            f"<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> <code>{'–í–ö–õ' if settings_manager.notification_enabled else '–í–´–ö–õ'}</code>\n\n"
            f"<b>üìà –¢–æ—á–Ω–æ—Å—Ç—å (7 –¥–Ω–µ–π):</b> <code>{accuracy_stats['accuracy']:.1f}%</code>\n"
            f"<b>ü§¨ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç–∞:</b> <code>{profanity_stats.get('total_profanity', 0)}</code>",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]])
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if q.data == "menu_settings":
        await q.edit_message_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            parse_mode=ParseMode.HTML,
            reply_markup=kb_settings_menu()
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–∏—Ç–∏–∫–∏
    if q.data == "settings_policy":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîî notify", callback_data="policy_notify")],
            [InlineKeyboardButton("üóëÔ∏è delete", callback_data="policy_delete")],
            [InlineKeyboardButton("üë¢ kick", callback_data="policy_kick")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_settings")]
        ])
        await q.edit_message_text(
            f"üõ°Ô∏è <b>–ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∞–º–∞</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: <code>{settings_manager.spam_policy}</code>\n\n"
            f"‚Ä¢ <b>notify</b> ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º\n"
            f"‚Ä¢ <b>delete</b> ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ\n"
            f"‚Ä¢ <b>kick</b> ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ + –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω",
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏
    if q.data.startswith("policy_"):
        policy = q.data.split("_", 1)[1]
        settings_manager.spam_policy = policy
        await q.edit_message_text(
            f"‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: <code>{policy}</code>",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="menu_settings")]])
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    if q.data == "settings_announce":
        settings_manager.announce_blocks = not settings_manager.announce_blocks
        state = "–≤–∫–ª—é—á–µ–Ω—ã" if settings_manager.announce_blocks else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await q.edit_message_text(
            f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö {state}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="menu_settings")]])
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if q.data == "settings_notifications":
        settings_manager.notification_enabled = not settings_manager.notification_enabled
        state = "–≤–∫–ª—é—á–µ–Ω—ã" if settings_manager.notification_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await q.edit_message_text(
            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º {state}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="menu_settings")]])
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    if q.data == "settings_retrain":
        await q.edit_message_text("‚è≥ –ü–µ—Ä–µ–æ–±—É—á–∞—é –º–æ–¥–µ–ª—å...")
        classifier.train()
        await q.edit_message_text(
            "‚úÖ –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="menu_settings")]])
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    if q.data == "menu_moderators":
        await q.edit_message_text(
            "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode=ParseMode.HTML,
            reply_markup=kb_moderators_menu()
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    if q.data == "mod_list":
        all_mods = settings_manager.get_all_moderators()
        additional_mods = settings_manager.get_additional_moderators()
        whitelist_mods = [uid for uid in all_mods if uid not in additional_mods]

        text = "<b>üë• –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤</b>\n\n"
        if whitelist_mods:
            text += "<b>üîí –û—Å–Ω–æ–≤–Ω—ã–µ:</b>\n"
            for mod_id in whitelist_mods[:5]:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                text += f"‚Ä¢ <code>{mod_id}</code>\n"
            if len(whitelist_mods) > 5:
                text += f"... –∏ –µ—â—ë {len(whitelist_mods) - 5}\n"
            text += "\n"

        if additional_mods:
            text += "<b>‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ:</b>\n"
            for mod_id in additional_mods[:5]:
                text += f"‚Ä¢ <code>{mod_id}</code>\n"
            if len(additional_mods) > 5:
                text += f"... –∏ –µ—â—ë {len(additional_mods) - 5}\n"
            text += "\n"

        text += f"<b>üìä –í—Å–µ–≥–æ:</b> {len(all_mods)}"

        await q.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_moderators")]])
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–º–æ—â–∏ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    if q.data == "mod_add_help":
        await q.edit_message_text(
            "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "‚Ä¢ <code>/givemoderator user_id</code>\n"
            "‚Ä¢ –ò–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π <code>/givemoderator</code>",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_moderators")]])
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–º–æ—â–∏ –ø–æ —É–¥–∞–ª–µ–Ω–∏—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    if q.data == "mod_remove_help":
        await q.edit_message_text(
            "‚ûñ <b>–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "<code>/removemoderator user_id</code>\n\n"
            "‚ö†Ô∏è –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ ENV",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_moderators")]])
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∞–Ω—Ç–∏–º–∞—Ç–∞
    if q.data == "menu_profanity":
        await q.edit_message_text(
            "ü§¨ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω—Ç–∏–º–∞—Ç —Ñ–∏–ª—å—Ç—Ä–æ–º</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode=ParseMode.HTML,
            reply_markup=kb_profanity_menu()
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–º–æ—â–∏ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª–æ–≤
    if q.data == "prof_check_help":
        await q.edit_message_text(
            "üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –º–∞—Ç</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "<code>/checkword —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</code>",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_profanity")]])
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–º–æ—â–∏ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Å–ª–æ–≤
    if q.data == "prof_add_help":
        await q.edit_message_text(
            "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ —Ñ–∏–ª—å—Ç—Ä</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "<code>/addword —Å–ª–æ–≤–æ</code>",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_profanity")]])
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–º–æ—â–∏ –ø–æ —É–¥–∞–ª–µ–Ω–∏—é —Å–ª–æ–≤
    if q.data == "prof_remove_help":
        await q.edit_message_text(
            "‚ûñ <b>–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "<code>/removeword —Å–ª–æ–≤–æ</code>",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_profanity")]])
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if q.data == "menu_stats":
        stats_7d = message_logger.get_model_accuracy_stats(days=7)
        stats_30d = message_logger.get_model_accuracy_stats(days=30)
        profanity_stats = message_logger.get_profanity_stats(days=7)

        await q.edit_message_text(
            f"<b>üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"<b>–ó–∞ 7 –¥–Ω–µ–π:</b>\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: <code>{stats_7d['total_reviewed']}</code>\n"
            f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: <code>{stats_7d['accuracy']:.1f}%</code>\n"
            f"‚Ä¢ –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: <code>{stats_7d['false_positives']}</code>\n"
            f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω —Å–ø–∞–º: <code>{stats_7d['false_negatives']}</code>\n\n"
            f"<b>–ó–∞ 30 –¥–Ω–µ–π:</b>\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: <code>{stats_30d['total_reviewed']}</code>\n"
            f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: <code>{stats_30d['accuracy']:.1f}%</code>\n\n"
            f"<b>ü§¨ –ú–∞—Ç–≤–æ—Ä–¥–æ–≤ –∑–∞ 7 –¥–Ω–µ–π:</b> <code>{profanity_stats.get('total_profanity', 0)}</code>",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]])
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ª–æ–≥–æ–≤
    if q.data == "menu_logs":
        recent_logs = message_logger.get_recent_logs(limit=5)

        if not recent_logs:
            text = "<b>üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏</b>\n\n‚ùå –õ–æ–≥–∏ –ø—É—Å—Ç—ã"
        else:
            text = "<b>üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π:</b>\n\n"
            for log in recent_logs:
                timestamp = log.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]
                user_name = log.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:20]
                prediction = log.get('predicted_label', 'unknown')
                action = log.get('action_taken', 'none')
                text += f"<code>{timestamp}</code> {html.escape(user_name)}\n{prediction} ‚Üí {action}\n\n"

        await q.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìÑ –ü–æ–ª–Ω—ã–µ –ª–æ–≥–∏", callback_data="logs_full")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]
            ])
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–Ω—ã—Ö –ª–æ–≥–æ–≤
    if q.data == "logs_full":
        await q.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /logs –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –∏–∑ inline –∫–Ω–æ–ø–∫–∏
    if q.data.startswith("add_word:"):
        word = q.data.split(":", 1)[1]
        if profanity_filter.add_word(word):
            await q.edit_message_text(f"‚úÖ –°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∞–Ω—Ç–∏–º–∞—Ç —Ñ–∏–ª—å—Ç—Ä.")
        else:
            await q.edit_message_text(f"‚ö†Ô∏è –°–ª–æ–≤–æ '{word}' —É–∂–µ –µ—Å—Ç—å –≤ —Ñ–∏–ª—å—Ç—Ä–µ.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
    if q.data == "cancel_action":
        await q.edit_message_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    if q.data.startswith("confirm_mod:"):
        user_id = int(q.data.split(":", 1)[1])
        if q.from_user.id in PENDING_MODERATORS:
            target_user_id, target_username = PENDING_MODERATORS.pop(q.from_user.id)

            if settings_manager.add_moderator(target_user_id):
                await q.edit_message_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} (ID: {target_user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!",
                    parse_mode=ParseMode.HTML
                )
                LOGGER.info(f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {q.from_user.id} –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {target_user_id}")
            else:
                await q.edit_message_text(
                    f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
                    parse_mode=ParseMode.HTML
                )
        else:
            await q.edit_message_text("‚ùå –ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    if q.data.startswith("cancel_mod:"):
        user_id = int(q.data.split(":", 1)[1])
        if q.from_user.id in PENDING_MODERATORS:
            target_user_id, target_username = PENDING_MODERATORS.pop(q.from_user.id)
            await q.edit_message_text(
                f"‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {target_username} –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                parse_mode=ParseMode.HTML
            )
        else:
            await q.edit_message_text("‚ùå –ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∞–º/—Ö–∞–º –∫–Ω–æ–ø–æ–∫
    if ":" in q.data:
        action, payload = q.data.split(":", 1)
        if action in ("spam", "ham"):
            chat_id, msg_id = map(int, payload.split(":", 1))

            stored = PENDING.pop((chat_id, msg_id), None)
            if stored:
                text, offender, offender_id = stored
            else:
                text, offender, offender_id = None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", None

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            moderator_user_id = q.from_user.id if q.from_user else None
            if moderator_user_id:
                message_logger.log_moderator_decision(
                    chat_id=chat_id,
                    message_id=msg_id,
                    decision=action,  # "spam" –∏–ª–∏ "ham"
                    moderator_user_id=moderator_user_id
                )

            if action == "spam":
                try:
                    await context.bot.delete_message(chat_id, msg_id)
                except Exception:
                    pass

                try:
                    if offender_id and isinstance(offender_id, int) and offender_id > 0:
                        await context.bot.ban_chat_member(chat_id, offender_id)
                        info = "‚õî –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω."
                    else:
                        info = "‚õî –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. (–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞.)"
                except Exception as e:
                    info = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}"

                await _announce_block(context, chat_id, offender, by_moderator=True)

                added = text and classifier.update_dataset(text, 1)
                if added:
                    info += " –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä –°–ü–ê–ú–ê üôÇ"

            elif action == "ham":
                added = text and classifier.update_dataset(text, 0)
                info = "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ù–ï —Å–ø–∞–º."
                if added:
                    info += " –ü—Ä–∏–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –¥–∞—Ç–∞—Å–µ—Ç üôÇ"

            else:
                info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."

            await q.edit_message_reply_markup(reply_markup=None)
            await q.edit_message_text(f"<i>{html.escape(info)}</i>", parse_mode=ParseMode.HTML)

async def cmd_start(update: Update, _):
    await update.effective_message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –∞–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç. –ù–∞–ø–∏—à–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.")

async def cmd_help(update: Update, _):
    if not is_explicit_command(update):
        return

    user = update.effective_user
    if not user:
        return

    if is_whitelisted(user.id):
        await update.effective_message.reply_html(
            "üìñ <b>–ü–æ–º–æ—â—å –ø–æ –∞–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç—É</b>\n\n"
            "<b>üõ°Ô∏è SPAM_POLICY</b> ‚Äî –∫–∞–∫ –±–æ—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
            " ‚Ä¢ <code>notify</code> ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å—Ç–∞—ë—Ç—Å—è, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
            " ‚Ä¢ <code>delete</code> ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
            " ‚Ä¢ <code>kick</code> ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç—Å—è, –∞–≤—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–∫–ª—é—á–∞–µ—Ç—Å—è\n\n"
            "<b>‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            " ‚Ä¢ <b>/menu</b> ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É–¥–æ–±–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏\n"
            " ‚Ä¢ <b>/status</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω—Ç–∏—Å–ø–∞–º–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            " ‚Ä¢ <b>/retrain</b> ‚Äî –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å\n"
            " ‚Ä¢ <b>/policy [—Ç–∏–ø]</b> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>/policy delete</code>)\n"
            " ‚Ä¢ <b>/announce [on/off]</b> ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö\n"
            " ‚Ä¢ <b>/notifications [on/off]</b> ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º\n\n"
            "<b>üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏:</b>\n"
            " ‚Ä¢ <b>/givemoderator [user_id]</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)\n"
            " ‚Ä¢ <b>/removemoderator [user_id]</b> ‚Äî —É–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
            " ‚Ä¢ <b>/moderators</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤\n\n"
            "<b>ü§¨ –ê–Ω—Ç–∏–º–∞—Ç —Ñ–∏–ª—å—Ç—Ä:</b>\n"
            " ‚Ä¢ <b>/addword [—Å–ª–æ–≤–æ]</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫\n"
            " ‚Ä¢ <b>/removeword [—Å–ª–æ–≤–æ]</b> ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞\n"
            " ‚Ä¢ <b>/checkword [—Ç–µ–∫—Å—Ç]</b> ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–∞—Ç–∞\n\n"
            "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ª–æ–≥–∏:</b>\n"
            " ‚Ä¢ <b>/stats</b> ‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏\n"
            " ‚Ä¢ <b>/logs</b> ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤\n"
            " ‚Ä¢ <b>/userinfo [user_id]</b> ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            "<i>üíæ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.</i>\n"
            "<i>üéØ –ü–æ—Ä–æ–≥ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–±—Ä–∞–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.</i>",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")]])
        )
    else:
        await update.effective_message.reply_html(
            "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n"
            "–Ø ‚Äî –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –±–µ—Å–µ–¥—ã –æ–¥–Ω–æ–≥–æ –∏–∑ —Ñ–∏–ª–∏–∞–ª–æ–≤ <b>–ñ–∏–∑–Ω—å –ú–∞—Ä—Ç</b>.\n"
            "–ü–æ–º–æ–≥–∞—é —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ—Ä—è–¥–æ–∫, —Ñ–∏–ª—å—Ç—Ä—É—é —Å–ø–∞–º –∏ —Ä–∞–±–æ—Ç–∞—é —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.\n\n"
            "–ï—Å–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—á–µ–∑–ª–æ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É."
        )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ADMIN COMMANDS
async def cmd_status(update: Update, _):
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    ds = Path(classifier.dataset_path)
    size_kb = ds.stat().st_size // 1024 if ds.exists() else 0

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
    try:
        accuracy_stats = message_logger.get_model_accuracy_stats(days=7)
        profanity_stats = message_logger.get_profanity_stats(days=7)
    except Exception:
        accuracy_stats = {'total_reviewed': 0, 'accuracy': 0, 'false_positives': 0, 'false_negatives': 0}
        profanity_stats = {'total_profanity': 0}

    # –£–±–∏—Ä–∞–µ–º –ø–æ—Ä–æ–≥ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å—Ç–∞—Ç—É—Å–∞
    await update.effective_message.reply_html(
        "<b>üìä –°—Ç–∞—Ç—É—Å –∞–Ω—Ç–∏—Å–ø–∞–º-—Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        
        f"<b>üìÅ –î–∞—Ç–∞—Å–µ—Ç:</b> <code>{ds.name}</code> ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö\n"
        f"<b>üì¶ –†–∞–∑–º–µ—Ä:</b> <code>{size_kb} –ö–∏–ë</code> ‚Äî –æ–±—ä—ë–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞\n"
        f"<b>üî¢ –ö–æ–ª-–≤–æ –∑–∞–ø–∏—Å–µ–π:</b> <code>{_dataset_rows()} —Å—Ç—Ä–æ–∫</code> ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ (—Å–æ–æ–±—â–µ–Ω–∏–π) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n"
        
        f"<b>üõ°Ô∏è –ü–æ–ª–∏—Ç–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b> <code>{settings_manager.spam_policy}</code> ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø–∞–º–∞\n"
        f"<b>üì£ –û–±—ä—è–≤–ª–µ–Ω–∏—è –æ –±–ª–æ–∫–∞—Ö:</b> <code>{'–í–ö–õ' if settings_manager.announce_blocks else '–í–´–ö–õ'}</code> ‚Äî —É–≤–µ–¥–æ–º–ª—è—Ç—å –ª–∏ —á–∞—Ç –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö\n"
        f"<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º:</b> <code>{'–í–ö–õ' if settings_manager.notification_enabled else '–í–´–ö–õ'}</code>\n\n"
        
        f"<b>üìà –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ (7 –¥–Ω–µ–π):</b>\n"
        f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏: <code>{accuracy_stats['total_reviewed']}</code>\n"
        f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: <code>{accuracy_stats['accuracy']:.1f}%</code>\n"
        f"‚Ä¢ –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: <code>{accuracy_stats['false_positives']}</code>\n"
        f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π —Å–ø–∞–º: <code>{accuracy_stats['false_negatives']}</code>\n\n"
        f"<b>ü§¨ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç–≤–æ—Ä–¥–æ–≤ –∑–∞ 7 –¥–Ω–µ–π:</b> <code>{profanity_stats.get('total_profanity', 0)}</code>",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")]])
    )

async def cmd_retrain(update: Update, _):
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return
    await update.effective_message.reply_text("‚è≥ –ü–µ—Ä–µ–æ–±—É—á–∞—é –º–æ–¥–µ–ª—å‚Ä¶")
    try:
        classifier.train()
        await update.effective_message.reply_text("‚úÖ –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞.")
    except Exception as e:
        await update.effective_message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {e}")

async def cmd_policy(update: Update, _):
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return
    args = update.message.text.split(maxsplit=1)

    if len(args) == 2 and args[1].lower() in {"notify", "delete", "kick"}:
        settings_manager.spam_policy = args[1].lower()
        await update.message.reply_text(f"‚úÖ SPAM_POLICY = {settings_manager.spam_policy}")
    else:
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {settings_manager.spam_policy}\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /policy notify|delete|kick"
        )

async def cmd_announce(update: Update, _):
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return
    args = update.message.text.split(maxsplit=1)

    if len(args) == 2 and args[1].lower() in {"on", "off"}:
        settings_manager.announce_blocks = args[1].lower() == "on"
        state = "–í–ö–õ" if settings_manager.announce_blocks else "–í–´–ö–õ"
        await update.message.reply_text(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {state}")
    else:
        state = "–í–ö–õ" if settings_manager.announce_blocks else "–í–´–ö–õ"
        await update.message.reply_text(
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å: {state}\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /announce on|off"
        )

async def cmd_notifications(update: Update, _):
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º."""
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return
    args = update.message.text.split(maxsplit=1)

    if len(args) == 2 and args[1].lower() in {"on", "off"}:
        settings_manager.notification_enabled = args[1].lower() == "on"
        state = "–í–ö–õ" if settings_manager.notification_enabled else "–í–´–ö–õ"
        await update.message.reply_text(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º: {state}")
    else:
        state = "–í–ö–õ" if settings_manager.notification_enabled else "–í–´–ö–õ"
        await update.message.reply_text(
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º: {state}\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /notifications on|off"
        )

async def cmd_stats(update: Update, _):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        stats_7d = message_logger.get_model_accuracy_stats(days=7)
        stats_30d = message_logger.get_model_accuracy_stats(days=30)
        profanity_stats = message_logger.get_profanity_stats(days=7)

        await update.effective_message.reply_html(
            "<b>üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            
            "<b>–ó–∞ 7 –¥–Ω–µ–π:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: <code>{stats_7d['total_reviewed']}</code>\n"
            f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: <code>{stats_7d['accuracy']:.1f}%</code>\n"
            f"‚Ä¢ –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: <code>{stats_7d['false_positives']}</code>\n"
            f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π —Å–ø–∞–º: <code>{stats_7d['false_negatives']}</code>\n\n"
            
            "<b>–ó–∞ 30 –¥–Ω–µ–π:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: <code>{stats_30d['total_reviewed']}</code>\n"
            f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: <code>{stats_30d['accuracy']:.1f}%</code>\n"
            f"‚Ä¢ –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: <code>{stats_30d['false_positives']}</code>\n"
            f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π —Å–ø–∞–º: <code>{stats_30d['false_negatives']}</code>\n\n"
            
            f"<b>ü§¨ –ú–∞—Ç–≤–æ—Ä–¥–æ–≤ –∑–∞ 7 –¥–Ω–µ–π:</b> <code>{profanity_stats.get('total_profanity', 0)}</code>",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")]])
        )
    except Exception as e:
        await update.effective_message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def cmd_user_info(update: Update, _):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return

    args = update.message.text.split(maxsplit=1)
    if len(args) < 2:
        await update.message.reply_html(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/userinfo &lt;user_id&gt;</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/userinfo 123456789</code>"
        )
        return

    try:
        user_id = int(args[1])
    except ValueError:
        await update.message.reply_html(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/userinfo 123456789</code>"
        )
        return

    try:
        user_stats = message_logger.get_user_stats(user_id, days=30)

        if user_stats['total_messages'] == 0:
            await update.effective_message.reply_html(
                f"<b>üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}</b>\n\n"
                "üìù <i>–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π</i>\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–ø–∞–¥–∞–ª–∏ –ø–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ø–∞–º–∞\n"
                "‚Ä¢ –î–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ —Å–æ–±—Ä–∞–Ω—ã —Å–∏—Å—Ç–µ–º–æ–π"
            )
        else:
            await update.effective_message.reply_html(
                f"<b>üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}</b>\n\n"
                f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <code>{user_stats['total_messages']}</code>\n"
                f"‚Ä¢ –ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —Å–ø–∞–º: <code>{user_stats['spam_messages']}</code>\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞: <code>{user_stats['avg_spam_probability']:.1%}</code>\n"
                f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{user_stats['last_message'] or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</code>"
            )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def cmd_logs(update: Update, _):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return

    try:
        recent_logs = message_logger.get_recent_logs(limit=10)

        if not recent_logs:
            await update.message.reply_html(
                "<b>üìù –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
                "‚ùå <i>–õ–æ–≥–∏ –ø—É—Å—Ç—ã</i>\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞\n"
                "‚Ä¢ –ù–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤"
            )
            return

        log_text = "<b>üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π:</b>\n\n"

        for log in recent_logs:
            timestamp = log.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:19]  # –æ–±—Ä–µ–∑–∞–µ–º –¥–æ —Å–µ–∫—É–Ω–¥
            user_name = log.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            text_preview = log.get('text', '')[:30] + ('...' if len(log.get('text', '')) > 30 else '')
            prediction = log.get('predicted_label', 'unknown')
            action = log.get('action_taken', 'none')
            probability = log.get('spam_probability', 0)

            log_text += (
                f"<code>{timestamp}</code>\n"
                f"üë§ {html.escape(user_name)}\n"
                f"üìù {html.escape(text_preview)}\n"
                f"üéØ {prediction} ({probability:.1%}) ‚Üí {action}\n\n"
            )

        await update.effective_message.reply_html(
            log_text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")]])
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")

async def cmd_removemoderator(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π."""
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return

    args = update.message.text.split(maxsplit=1)
    if len(args) < 2:
        await update.message.reply_html(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/removemoderator &lt;user_id&gt;</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/removemoderator 123456789</code>"
        )
        return

    try:
        target_user_id = int(args[1])
    except ValueError:
        await update.message.reply_html(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/removemoderator 123456789</code>"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤–æ–æ–±—â–µ
    if not settings_manager.is_moderator(target_user_id):
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å (–Ω–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ whitelist)
    from config.config import settings as config_settings
    if target_user_id in config_settings.WHITELIST_USER_IDS:
        await update.message.reply_html(
            f"‚ùå <b>–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target_user_id}</code> —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É.\n\n"
            f"–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è <code>WHITELIST_USER_IDS</code>."
        )
        return

    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å
    if settings_manager.remove_moderator(target_user_id):
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
        LOGGER.info(f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {update.effective_user.id} —É–¥–∞–ª–∏–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {target_user_id}")
    else:
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.")

async def cmd_addword(update: Update, _) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –≤ –∞–Ω—Ç–∏–º–∞—Ç —Ñ–∏–ª—å—Ç—Ä —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return

    args = update.message.text.split(maxsplit=1)
    if len(args) < 2:
        await update.message.reply_html(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/addword &lt;—Å–ª–æ–≤–æ&gt;</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/addword —Å–ø–∞–º</code>\n\n"
            "‚ö†Ô∏è –°–ª–æ–≤–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∞–Ω—Ç–∏–º–∞—Ç —Ñ–∏–ª—å—Ç—Ä"
        )
        return

    word = args[1].strip().lower()

    if len(word) < 2:
        await update.message.reply_text("‚ùå –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        return

    if len(word) > 50:
        await update.message.reply_text("‚ùå –°–ª–æ–≤–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    try:
        if profanity_filter.add_word(word):
            await update.message.reply_text(f"‚úÖ –°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∞–Ω—Ç–∏–º–∞—Ç —Ñ–∏–ª—å—Ç—Ä.")
            LOGGER.info(f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {update.effective_user.id} –¥–æ–±–∞–≤–∏–ª —Å–ª–æ–≤–æ '{word}' –≤ —Ñ–∏–ª—å—Ç—Ä")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –°–ª–æ–≤–æ '{word}' —É–∂–µ –µ—Å—Ç—å –≤ —Ñ–∏–ª—å—Ç—Ä–µ.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞: {e}")

async def cmd_removeword(update: Update, _) -> None:
    """–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ –∞–Ω—Ç–∏–º–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return

    args = update.message.text.split(maxsplit=1)
    if len(args) < 2:
        await update.message.reply_html(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/removeword &lt;—Å–ª–æ–≤–æ&gt;</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/removeword —Å–ø–∞–º</code>"
        )
        return

    word = args[1].strip().lower()

    try:
        if profanity_filter.remove_word(word):
            await update.message.reply_text(f"‚úÖ –°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∞–Ω—Ç–∏–º–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞.")
            LOGGER.info(f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {update.effective_user.id} —É–¥–∞–ª–∏–ª —Å–ª–æ–≤–æ '{word}' –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ñ–∏–ª—å—Ç—Ä–µ.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞: {e}")

async def cmd_checkword(update: Update, _) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–∞—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ inline –∫–Ω–æ–ø–∫–∞–º–∏."""
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return

    args = update.message.text.split(maxsplit=1)
    if len(args) < 2:
        await update.message.reply_html(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/checkword &lt;—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏&gt;</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/checkword –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç</code>"
        )
        return

    text_to_check = args[1]

    if len(text_to_check) > 500:
        await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    try:
        if profanity_filter.contains_profanity(text_to_check):
            found_words = profanity_filter.get_profanity_words(text_to_check)
            await update.message.reply_html(
                f"üö´ <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—Ç!</b>\n"
                f"–ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤: <code>{', '.join(found_words)}</code>"
            )
        else:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –º–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
            words_in_text = [w.strip().lower() for w in text_to_check.split() if len(w.strip()) >= 2]

            if words_in_text:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                first_word = words_in_text[0]
                await update.message.reply_html(
                    "‚úÖ <b>–ú–∞—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω</b>\n\n"
                    f"–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞, –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ —Ñ–∏–ª—å—Ç—Ä:",
                    reply_markup=kb_word_not_found(first_word)
                )
            else:
                await update.message.reply_text("‚úÖ –ú–∞—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

async def cmd_givemoderator(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –∏–ª–∏ reply
    target_user_id = None
    target_username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message.reply_to_message and update.message.reply_to_message.from_user:
        target_user_id = update.message.reply_to_message.from_user.id
        target_username = update.message.reply_to_message.from_user.full_name
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = update.message.text.split(maxsplit=1)
        if len(args) < 2:
            await update.message.reply_html(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "‚Ä¢ <code>/givemoderator &lt;user_id&gt;</code>\n"
                "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π <code>/givemoderator</code>\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/givemoderator 123456789</code>"
            )
            return

        arg = args[1].strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if arg.startswith('@'):
            await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ username –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ user_id –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º user_id
        try:
            target_user_id = int(arg)
            target_username = f"ID: {target_user_id}"
        except ValueError:
            await update.message.reply_html(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id</b>\n\n"
                "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/givemoderator 123456789</code>"
            )
            return

    if not target_user_id:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ª–∏ —É–∂–µ
    if settings_manager.is_moderator(target_user_id):
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ pending –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    PENDING_MODERATORS[update.effective_user.id] = (target_user_id, target_username)

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å", callback_data=f"confirm_mod:{target_user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_mod:{target_user_id}")
        ]
    ])

    await update.message.reply_html(
        f"<b>üîê –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å <b>{html.escape(target_username)}</b> (ID: <code>{target_user_id}</code>) –≤ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤?\n\n"
        f"‚ö†Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º –∏ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –æ —Å–ø–∞–º–µ.",
        reply_markup=keyboard
    )

async def cmd_moderators(update: Update, _) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º."""
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return

    try:
        all_mods = settings_manager.get_all_moderators()
        additional_mods = settings_manager.get_additional_moderators()

        text = "<b>üë• –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤</b>\n\n"

        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã (–∏–∑ whitelist)
        whitelist_mods = [uid for uid in all_mods if uid not in additional_mods]
        if whitelist_mods:
            text += "<b>üîí –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã (–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏):</b>\n"
            for mod_id in whitelist_mods:
                text += f"‚Ä¢ <code>{mod_id}</code>\n"
            text += "\n"

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã
        if additional_mods:
            text += "<b>‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã:</b>\n"
            for mod_id in additional_mods:
                text += f"‚Ä¢ <code>{mod_id}</code> (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å)\n"
            text += "\n"

        text += f"<b>üìä –í—Å–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:</b> {len(all_mods)}\n\n"
        text += "<i>üí° –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É</i>"

        await update.effective_message.reply_html(
            text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")]])
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {e}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  NEW MENU COMMAND
async def cmd_menu(update: Update, _) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞."""
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return

    await update.effective_message.reply_html(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=kb_admin_menu()
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  REGISTRATION
def register_handlers(app: Application) -> None:
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("menu", cmd_menu))  # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    app.add_handler(CommandHandler("status", cmd_status))
    app.add_handler(CommandHandler("retrain", cmd_retrain))
    app.add_handler(CommandHandler("policy", cmd_policy))
    app.add_handler(CommandHandler("announce", cmd_announce))
    app.add_handler(CommandHandler("notifications", cmd_notifications))

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    app.add_handler(CommandHandler("stats", cmd_stats))
    app.add_handler(CommandHandler("userinfo", cmd_user_info))
    app.add_handler(CommandHandler("logs", cmd_logs))

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
    app.add_handler(CommandHandler("givemoderator", cmd_givemoderator))
    app.add_handler(CommandHandler("removemoderator", cmd_removemoderator))
    app.add_handler(CommandHandler("moderators", cmd_moderators))

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω—Ç–∏–º–∞—Ç —Ñ–∏–ª—å—Ç—Ä–æ–º
    app.add_handler(CommandHandler("addword", cmd_addword))
    app.add_handler(CommandHandler("removeword", cmd_removeword))
    app.add_handler(CommandHandler("checkword", cmd_checkword))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã)
    app.add_handler(CallbackQueryHandler(on_callback, pattern="^(spam|ham|confirm_mod|cancel_mod|menu_|settings_|policy_|mod_|prof_|add_word|cancel_action|logs_full):"))
    app.add_handler(MessageHandler(filters.TEXT | filters.CaptionRegex(".*"), on_message))
