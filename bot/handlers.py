from __future__ import annotations

import html
import time
from pathlib import Path

from collections import OrderedDict
from telegram import Message, Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from config.config import settings
from core.coordinator import FilterCoordinator
from core.types import Action, AnalysisResult
from filters.keyword import KeywordFilter
from filters.tfidf import TfidfFilter
from filters.embedding import EmbeddingFilter
from services.policy import PolicyEngine
from services.dataset import DatasetManager
from services.meta_classifier import MetaClassifier  # NEW
from bot.keyboards import moderator_keyboard, format_debug_card, format_notification_card
from utils.logger import get_logger

LOGGER = get_logger(__name__)

keyword_filter = KeywordFilter()
tfidf_filter = TfidfFilter()
embedding_filter = EmbeddingFilter(
    mode=settings.EMBEDDING_MODE,
    api_key=settings.MISTRAL_API_KEY,
    model_id=settings.EMBEDDING_MODEL_ID,
    ollama_model=settings.OLLAMA_MODEL,
    ollama_base_url=settings.OLLAMA_BASE_URL
)

coordinator = FilterCoordinator(
    keyword_filter=keyword_filter,
    tfidf_filter=tfidf_filter,
    embedding_filter=embedding_filter
)

policy_engine = PolicyEngine()  # Reads config from runtime_config singleton

# NEW: –ú–µ—Ç–∞-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
meta_classifier = MetaClassifier()

# –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª–∏—Ç–∏–∫–∏
from config.runtime import runtime_config
LOGGER.info(f"Policy configuration loaded:")
LOGGER.info(f"  MODE: {runtime_config.policy_mode}")
LOGGER.info(f"  META_NOTIFY: {runtime_config.meta_notify}")
LOGGER.info(f"  META_DELETE: {runtime_config.meta_delete}")
LOGGER.info(f"  META_KICK: {runtime_config.meta_kick}")
LOGGER.info(f"  META_CLASSIFIER_READY: {meta_classifier.is_ready()}")

dataset_manager = DatasetManager(
    Path(__file__).resolve().parents[1] / "data" / "messages.csv"
)

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –±—É—Ñ–µ—Ä–æ–≤, —á—Ç–æ–±—ã –Ω–µ –¥–æ–ø—É—Å–∫–∞—Ç—å –Ω–µ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–≥–æ —Ä–æ—Å—Ç–∞ –ø–∞–º—è—Ç–∏
MAX_PENDING_QUEUE = 200
MAX_SPAM_STORAGE = 500

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è pending –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π
PENDING: OrderedDict[tuple[int, int], tuple[str, str, int, AnalysisResult]] = OrderedDict()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (spam_id -> –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
SPAM_STORAGE: OrderedDict[int, dict] = OrderedDict()
SPAM_ID_COUNTER = 0


def is_whitelisted(uid: int) -> bool:
    return uid in settings.WHITELIST_USER_IDS


def is_explicit_command(update: Update) -> bool:
    msg = update.effective_message
    if not msg:
        return False

    if msg.chat_id == settings.MODERATOR_CHAT_ID:
        return True

    entities = msg.entities or []
    for ent in entities:
        if ent.type == "bot_command":
            command_text = msg.text[ent.offset : ent.offset + ent.length]
            if "@" in command_text:
                return True
    return False


def get_message_link(msg: Message) -> str:
    if msg.chat.username:
        return f"https://t.me/{msg.chat.username}/{msg.message_id}"
    return f"https://t.me/c/{abs(msg.chat_id)}/{msg.message_id}"


async def announce_block(
    context: ContextTypes.DEFAULT_TYPE,
    chat_id: int,
    offender_name: str,
    by_moderator: bool,
) -> None:
    if not settings.ANNOUNCE_BLOCKS:
        return
    
    reason = "–ø–æ —Ä–µ—à–µ–Ω–∏—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞" if by_moderator else "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
    await context.bot.send_message(
        chat_id,
        f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b>{html.escape(offender_name)}</b> —É–¥–∞–ª–µ–Ω–æ {reason}.",
        parse_mode=ParseMode.HTML,
    )


async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg: Message = update.effective_message
    if not msg or not msg.from_user:
        return

    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ ID —á–∞—Ç–∞
    LOGGER.info(f"üìç –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ ID: {msg.chat_id} (—Ç–∏–ø: {msg.chat.type})")

    text = (msg.text or msg.caption or "").strip()
    if not text or msg.chat_id == settings.MODERATOR_CHAT_ID:
        return
    
    if is_whitelisted(msg.from_user.id):
        return
    
    # –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π Message –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    analysis = await coordinator.analyze(text, message=msg)
    
    # –®–∞–≥ 2: –ú–µ—Ç–∞-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    p_spam = None
    meta_debug = None
    
    embeddings_available = (
        analysis.embedding_vectors is not None
        and analysis.embedding_vectors.E_msg is not None
    )

    if meta_classifier.is_ready() and embeddings_available:
        try:
            p_spam, meta_debug = await meta_classifier.predict_proba(text, analysis)
            
            if p_spam is not None:
                LOGGER.info(
                    f"MetaClassifier: p_spam={p_spam:.3f}, "
                    f"sim_spam_msg={meta_debug.get('sim_spam_msg', 'N/A')}, "
                    f"delta_msg={meta_debug.get('delta_msg', 'N/A')}"
                )
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π AnalysisResult —Å –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–º–∏
                from dataclasses import replace
                analysis = replace(analysis, meta_proba=p_spam, meta_debug=meta_debug)
        except Exception as e:
            LOGGER.error(f"MetaClassifier failed: {e}", exc_info=True)
    else:
        if not meta_classifier.is_ready():
            LOGGER.warning("MetaClassifier skipped: models not ready")
        elif not embeddings_available:
            LOGGER.warning("MetaClassifier skipped: embeddings unavailable, falling back to classic filters")
    
    # –®–∞–≥ 3: –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è (—Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç action + decision_details)
    action, decision_details = policy_engine.decide_action(analysis)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    if analysis.meta_proba is not None:
        LOGGER.info(
            f"Message from {msg.from_user.full_name}: "
            f"p_spam={decision_details['p_spam_original']:.2f}‚Üí{decision_details['p_spam_adjusted']:.2f}, "
            f"action={action.value}, mode={decision_details['policy_mode']}, "
            f"downweights={len(decision_details['applied_downweights'])}"
        )
    else:
        LOGGER.info(
            f"Message from {msg.from_user.full_name}: "
            f"avg={analysis.average_score:.2f}, action={action.value}"
        )
    
    if action == Action.APPROVE:
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —ç—Ç–æ–≥–æ —Å–ø–∞–º–∞
    global SPAM_ID_COUNTER
    SPAM_ID_COUNTER += 1
    spam_id = SPAM_ID_COUNTER
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è debug
    msg_link = get_message_link(msg)
    SPAM_STORAGE[spam_id] = {
        "spam_id": spam_id,
        "user_name": msg.from_user.full_name,
        "user_id": msg.from_user.id,
        "chat_id": msg.chat_id,
        "message_id": msg.message_id,
        "text": text,
        "msg_link": msg_link,
        "analysis": analysis,
        "action": action,
        "decision_details": decision_details  # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–µ—à–µ–Ω–∏—è
    }
    while len(SPAM_STORAGE) > MAX_SPAM_STORAGE:
        removed_id, _ = SPAM_STORAGE.popitem(last=False)
        LOGGER.debug(f"Trimmed SPAM_STORAGE, evicted spam_id={removed_id}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É (–ø—Ä–æ—Å—Ç—É—é –∏–ª–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç DETAILED_DEBUG_INFO)
    card = format_notification_card(
        spam_id=spam_id,
        user_name=msg.from_user.full_name,
        user_id=msg.from_user.id,
        text=text,
        msg_link=msg_link,
        analysis=analysis,
        action=action,
        chat_id=msg.chat_id,
        message_id=msg.message_id,
        decision_details=decision_details  # –ü–µ—Ä–µ–¥–∞—ë–º decision_details
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    # –ö–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è NOTIFY, –¥–ª—è DELETE/KICK - –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    keyboard = moderator_keyboard(msg.chat_id, msg.message_id) if action == Action.NOTIFY else None
    
    await context.bot.send_message(
        settings.MODERATOR_CHAT_ID,
        card,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True,
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ PENDING —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–µ—à–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    if action == Action.NOTIFY:
        PENDING[(msg.chat_id, msg.message_id)] = (
            text,
            msg.from_user.full_name,
            msg.from_user.id,
            analysis
        )
        while len(PENDING) > MAX_PENDING_QUEUE:
            removed_key, _ = PENDING.popitem(last=False)
            LOGGER.debug(f"Trimmed PENDING queue, evicted key={removed_key}")
    
    if action in (Action.DELETE, Action.KICK):
        try:
            await msg.delete()
            if action == Action.KICK:
                await context.bot.ban_chat_member(msg.chat_id, msg.from_user.id, until_date=60)
                await context.bot.unban_chat_member(msg.chat_id, msg.from_user.id)
        except Exception as e:
            LOGGER.warning(f"Failed to delete/kick: {e}")
        
        await announce_block(context, msg.chat_id, msg.from_user.full_name, by_moderator=False)
        
        if settings.ANNOUNCE_BLOCKS:
            await context.bot.send_message(
                msg.from_user.id,
                "‚ùå –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n"
                "–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –≤—Å—ë –∏—Å–ø—Ä–∞–≤–∏—Ç.",
                parse_mode=ParseMode.HTML,
            )


async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    if not q:
        return
    await q.answer()

    action, payload = q.data.split(":", 1)
    chat_id, msg_id = map(int, payload.split(":", 1))

    stored = PENDING.pop((chat_id, msg_id), None)
    if stored:
        text, offender, offender_id, analysis = stored
    else:
        text, offender, offender_id, analysis = None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", None, None

    if action == "kick":
        try:
            await context.bot.delete_message(chat_id, msg_id)
        except Exception:
            pass

        try:
            if offender_id and isinstance(offender_id, int) and offender_id > 0:
                await context.bot.ban_chat_member(chat_id, offender_id)
                info = "‚õî –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω."
            else:
                info = "‚õî –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. (–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞.)"
        except Exception as e:
            info = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}"

        await announce_block(context, chat_id, offender, by_moderator=True)

        if text:
            dataset_manager.add_sample(text, 1)
            info += " –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ –°–ü–ê–ú."

    elif action == "ham":
        if text:
            dataset_manager.add_sample(text, 0)
            info = "‚úÖ –ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ù–ï —Å–ø–∞–º. –ü—Ä–∏–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω."
        else:
            info = "‚úÖ –ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ù–ï —Å–ø–∞–º."

    else:
        info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."

    await q.edit_message_reply_markup(reply_markup=None)
    await q.edit_message_text(f"<i>{html.escape(info)}</i>", parse_mode=ParseMode.HTML)
    
    if tfidf_filter.should_retrain(settings.RETRAIN_THRESHOLD):
        LOGGER.info("Retrain threshold reached, training TF-IDF model...")
        tfidf_filter.train()


async def cmd_status(update: Update, _):
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return
    
    dataset_size_kb = dataset_manager.get_size_kb()
    dataset_rows = dataset_manager.get_row_count()
    
    filters_status = []
    if keyword_filter.is_ready():
        filters_status.append("üî§ Keyword: ‚úÖ")
    else:
        filters_status.append("üî§ Keyword: ‚ùå")
    
    if tfidf_filter.is_ready():
        filters_status.append("üìà TF-IDF: ‚úÖ")
    else:
        filters_status.append("üìà TF-IDF: ‚ùå")
    
    if embedding_filter.is_ready():
        filters_status.append(f"üß† Embedding: ‚úÖ ({settings.EMBEDDING_MODE})")
    else:
        filters_status.append(f"üß† Embedding: ‚ùå ({settings.EMBEDDING_MODE})")
    
    # –ú–µ—Ç–∞-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å
    if meta_classifier.is_ready():
        filters_status.append("üéØ MetaClassifier: ‚úÖ")
    else:
        filters_status.append("üéØ MetaClassifier: ‚ùå (not trained)")
    
    await update.effective_message.reply_html(
        "<b>üìä –°—Ç–∞—Ç—É—Å –∞–Ω—Ç–∏—Å–ø–∞–º-—Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        f"<b>üìÅ –î–∞—Ç–∞—Å–µ—Ç:</b> <code>messages.csv</code>\n"
        f"<b>üì¶ –†–∞–∑–º–µ—Ä:</b> <code>{dataset_size_kb} –ö–∏–ë</code>\n"
        f"<b>üî¢ –ó–∞–ø–∏—Å–µ–π:</b> <code>{dataset_rows}</code>\n\n"
        "<b>üõ°Ô∏è –§–∏–ª—å—Ç—Ä—ã:</b>\n" + "\n".join(filters_status) + "\n\n"
        f"<b>ü§ñ –†–µ–∂–∏–º –ø–æ–ª–∏—Ç–∏–∫–∏:</b> <code>{runtime_config.policy_mode}</code>\n"
        f"<b>üì£ –û–±—ä—è–≤–ª–µ–Ω–∏—è:</b> <code>{'–í–ö–õ' if settings.ANNOUNCE_BLOCKS else '–í–´–ö–õ'}</code>"
    )


async def cmd_retrain(update: Update, _):
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return
    await update.effective_message.reply_text("‚è≥ –ü–µ—Ä–µ–æ–±—É—á–∞—é TF-IDF –º–æ–¥–µ–ª—å‚Ä¶")
    tfidf_filter.train()
    time.sleep(3)
    await update.effective_message.reply_text("‚úÖ –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞.")


async def cmd_debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /debug N - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∞–º–µ ‚ÑñN"""
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return
    
    if not context.args or len(context.args) != 1:
        await update.effective_message.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /debug <–Ω–æ–º–µ—Ä>\n"
            "–ü—Ä–∏–º–µ—Ä: /debug 123"
        )
        return
    
    try:
        spam_id = int(context.args[0])
    except ValueError:
        await update.effective_message.reply_text("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    if spam_id not in SPAM_STORAGE:
        await update.effective_message.reply_text(
            f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ ‚Ññ{spam_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ ID: {min(SPAM_STORAGE.keys()) if SPAM_STORAGE else '–Ω–µ—Ç'} - "
            f"{max(SPAM_STORAGE.keys()) if SPAM_STORAGE else '–Ω–µ—Ç'}"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    data = SPAM_STORAGE[spam_id]
    
    card = format_debug_card(
        spam_id=data["spam_id"],
        user_name=data["user_name"],
        user_id=data["user_id"],
        text=data["text"],
        msg_link=data["msg_link"],
        analysis=data["analysis"],
        action=data["action"],
        chat_id=data["chat_id"],
        message_id=data["message_id"]
    )
    
    await update.effective_message.reply_html(
        card,
        disable_web_page_preview=True
    )


async def cmd_setpolicy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–ª–∏—Ç–∏–∫–∏ –≤ runtime"""
    if not is_explicit_command(update):
        return

    user = update.effective_user
    if not user or not is_whitelisted(user.id):
        await update.effective_message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º")
        return

    if not context.args or len(context.args) != 1:
        await update.effective_message.reply_html(
            "‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ø–æ–ª–∏—Ç–∏–∫–∏:</b> <code>{}</code>\n\n"
            "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>/setpolicy &lt;—Ä–µ–∂–∏–º&gt;</code>\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:</b>\n"
            " ‚Ä¢ <code>manual</code> ‚Äî –≤—Å—ë –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
            " - <code>legacy-manual</code> - keyword -> TF-IDF (meta classifier output is informational only)\n"
            " ‚Ä¢ <code>semi-auto</code> ‚Äî –∞–≤—Ç–æ –ø—Ä–∏ –≤—ã—Å–æ–∫–∏—Ö –æ—Ü–µ–Ω–∫–∞—Ö\n"
            " ‚Ä¢ <code>auto</code> ‚Äî –ø–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è".format(
                html.escape(runtime_config.policy_mode)
            )
        )
        return

    new_mode = context.args[0].lower()
    old_mode = runtime_config.policy_mode
    
    try:
        runtime_config.set_policy_mode(new_mode)
        policy_engine.policy_mode = runtime_config.policy_mode
        LOGGER.info(f"Policy mode changed: {old_mode} ‚Üí {new_mode} (by user {user.id})")
        
        await update.effective_message.reply_html(
            "‚úÖ <b>–†–µ–∂–∏–º –ø–æ–ª–∏—Ç–∏–∫–∏ –∏–∑–º–µ–Ω—ë–Ω</b>\n\n"
            " ‚Ä¢ –ë—ã–ª–æ: <code>{}</code>\n"
            " ‚Ä¢ –°—Ç–∞–ª–æ: <code>{}</code>\n\n"
            "–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.".format(
                html.escape(old_mode),
                html.escape(new_mode)
            )
        )
    except ValueError as e:
        await update.effective_message.reply_html(
            f"‚ùå –û—à–∏–±–∫–∞: {html.escape(str(e))}\n\n"
            "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ: <code>manual</code>, <code>legacy-manual</code>, <code>semi-auto</code>, <code>auto</code>"
        )


async def cmd_setthreshold(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ —Ñ–∏–ª—å—Ç—Ä–∞ –≤ runtime"""
    if not is_explicit_command(update):
        return

    user = update.effective_user
    if not user or not is_whitelisted(user.id):
        await update.effective_message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º")
        return

    if not context.args or len(context.args) != 2:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        overrides = runtime_config.get_overrides()
        overrides_text = "\n".join(
            f" ‚Ä¢ <code>{k}</code> = <b>{v}</b> ‚ö†Ô∏è" 
            for k, v in overrides.items()
        ) if overrides else " <i>–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π</i>"
        
        await update.effective_message.reply_html(
            "‚öôÔ∏è <b>–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>\n\n"
            "<b>–†–µ–∂–∏–º:</b> <code>" + runtime_config.policy_mode + "</code>\n\n"
            "<b>–ü–æ—Ä–æ–≥–∏ –º–µ—Ç–∞-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞:</b>\n"
            f" ‚Ä¢ <code>meta_notify</code> = {runtime_config.meta_notify:.2f}\n"
            f" ‚Ä¢ <code>meta_delete</code> = {runtime_config.meta_delete:.2f}\n"
            f" ‚Ä¢ <code>meta_kick</code> = {runtime_config.meta_kick:.2f}\n\n"
            "<b>–ú–Ω–æ–∂–∏—Ç–µ–ª–∏:</b>\n"
            f" ‚Ä¢ <code>announcement</code> = {runtime_config.meta_downweight_announcement:.2f}\n"
            f" ‚Ä¢ <code>reply_to_staff</code> = {runtime_config.meta_downweight_reply_to_staff:.2f}\n"
            f" ‚Ä¢ <code>whitelist</code> = {runtime_config.meta_downweight_whitelist:.2f}\n\n"
            "<b>–ò–∑–º–µ–Ω–µ–Ω–æ:</b>\n" + overrides_text + "\n\n"
            "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            " ‚Ä¢ <code>/setthreshold meta_notify 0.70</code>\n"
            " ‚Ä¢ <code>/setdownweight announcement 0.80</code>\n"
            " ‚Ä¢ <code>/resetconfig</code> - —Å–±—Ä–æ—Å"
        )
        return

    threshold_name = context.args[0].lower()

    try:
        new_value = float(context.args[1])
    except ValueError:
        await update.effective_message.reply_text(
            f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {context.args[1]}\n"
            "–û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ –æ—Ç 0.0 –¥–æ 1.0"
        )
        return

    if not 0.0 <= new_value <= 1.0:
        await update.effective_message.reply_text(
            f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value:.2f}\n"
            "–û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ –æ—Ç 0.0 –¥–æ 1.0"
        )
        return

    allowed_thresholds = {"meta_notify", "meta_delete", "meta_kick"}

    if threshold_name not in allowed_thresholds:
        await update.effective_message.reply_html(
            f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Ä–æ–≥: <code>{html.escape(threshold_name)}</code>\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä–æ–≥–∏:</b>\n"
            " ‚Ä¢ <code>meta_notify</code>\n"
            " ‚Ä¢ <code>meta_delete</code>\n"
            " ‚Ä¢ <code>meta_kick</code>"
        )
        return

    old_value = getattr(runtime_config, threshold_name)

    if not runtime_config.set_threshold(threshold_name, new_value):
        await update.effective_message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥"
        )
        return

    setattr(policy_engine, threshold_name, getattr(runtime_config, threshold_name))

    LOGGER.info(
        f"Threshold changed: {threshold_name} {old_value} ‚Üí {new_value} "
        f"(by user {user.id})"
    )

    await update.effective_message.reply_html(
        "‚úÖ <b>–ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω—ë–Ω</b>\n\n"
        f" ‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä: <code>{html.escape(threshold_name)}</code>\n"
        f" ‚Ä¢ –ë—ã–ª–æ: <code>{old_value:.2f}</code>\n"
        f" ‚Ä¢ –°—Ç–∞–ª–æ: <code>{new_value:.2f}</code>\n\n"
        "–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã."
    )

    return

async def cmd_setdownweight(update: Update, context):
    """–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–Ω–∏–∂–∞—é—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å"""
    if not is_explicit_command(update):
        return

    user = update.effective_user
    if not user or not is_whitelisted(user.id):
        await update.effective_message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º")
        return

    if not context.args or len(context.args) != 2:
        await update.effective_message.reply_html(
            "‚öôÔ∏è <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π</b>\n\n"
            "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "<code>/setdownweight &lt;—Ç–∏–ø&gt; &lt;–∑–Ω–∞—á–µ–Ω–∏–µ&gt;</code>\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:</b>\n"
            " ‚Ä¢ <code>announcement</code> - –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤\n"
            " ‚Ä¢ <code>reply_to_staff</code> - –æ—Ç–≤–µ—Ç—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º\n"
            " ‚Ä¢ <code>whitelist</code> - whitelist —Ç–µ—Ä–º–∏–Ω—ã\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> <code>/setdownweight announcement 0.80</code>"
        )
        return

    downweight_type = context.args[0].lower()

    try:
        new_value = float(context.args[1])
    except ValueError:
        await update.effective_message.reply_text(
            f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {context.args[1]}\n"
            "–û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ –æ—Ç 0.0 –¥–æ 1.0"
        )
        return

    if not 0.0 <= new_value <= 1.0:
        await update.effective_message.reply_text(
            f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value:.2f}\n"
            "–û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ –æ—Ç 0.0 –¥–æ 1.0"
        )
        return

    runtime_attr_map = {
        "announcement": "meta_downweight_announcement",
        "reply_to_staff": "meta_downweight_reply_to_staff",
        "whitelist": "meta_downweight_whitelist",
    }

    policy_attr_map = {
        "announcement": "downweight_announcement",
        "reply_to_staff": "downweight_reply_to_staff",
        "whitelist": "downweight_whitelist",
    }

    runtime_attr = runtime_attr_map.get(downweight_type)

    if not runtime_attr:
        await update.effective_message.reply_html(
            f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–Ω–æ–∂–∏—Ç–µ–ª—è: <code>{html.escape(downweight_type)}</code>\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:</b>\n"
            " ‚Ä¢ <code>announcement</code>\n"
            " ‚Ä¢ <code>reply_to_staff</code>\n"
            " ‚Ä¢ <code>whitelist</code>"
        )
        return

    old_value = getattr(runtime_config, runtime_attr)

    if not runtime_config.set_downweight(downweight_type, new_value):
        await update.effective_message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å")
        return

    policy_attr = policy_attr_map[downweight_type]
    setattr(policy_engine, policy_attr, getattr(runtime_config, runtime_attr))

    LOGGER.info(
        f"Downweight changed: {downweight_type} {old_value} ‚Üí {new_value} (by user {user.id})"
    )

    await update.effective_message.reply_html(
        "‚úÖ <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å –∏–∑–º–µ–Ω—ë–Ω</b>\n\n"
        f" ‚Ä¢ –¢–∏–ø: <code>{html.escape(downweight_type)}</code>\n"
        f" ‚Ä¢ –ë—ã–ª–æ: <code>{old_value:.2f}</code>\n"
        f" ‚Ä¢ –°—Ç–∞–ª–æ: <code>{new_value:.2f}</code>\n\n"
        "–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã."
    )

    return

async def cmd_resetconfig(update: Update, _):
    """–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    if not is_explicit_command(update):
        return

    user = update.effective_user
    if not user or not is_whitelisted(user.id):
        await update.effective_message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º")
        return

    overrides = runtime_config.get_overrides()
    if not overrides:
        await update.effective_message.reply_text(
            "‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Å–±—Ä–æ—Å–∞.\n"
            "–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ .env"
        )
        return

    runtime_config.reset_overrides()

    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–≤–∏–∂–æ–∫ –ø–æ–ª–∏—Ç–∏–∫–∏ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    policy_engine.policy_mode = runtime_config.policy_mode
    policy_engine.meta_notify = runtime_config.meta_notify
    policy_engine.meta_delete = runtime_config.meta_delete
    policy_engine.meta_kick = runtime_config.meta_kick
    policy_engine.downweight_announcement = runtime_config.meta_downweight_announcement
    policy_engine.downweight_reply_to_staff = runtime_config.meta_downweight_reply_to_staff
    policy_engine.downweight_whitelist = runtime_config.meta_downweight_whitelist

    LOGGER.info(f"Configuration reset to defaults (by user {user.id})")
    
    overrides_text = "\n".join(
        f" ‚Ä¢ <code>{k}</code> = {v}"
        for k, v in overrides.items()
    )
    
    await update.effective_message.reply_html(
        "‚úÖ <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞</b>\n\n"
        "–°–±—Ä–æ—à–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n" + overrides_text + "\n\n"
        "–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ .env"
    )


async def cmd_start(update: Update, _):
    if not is_explicit_command(update):
        return

    user = update.effective_user
    if not user:
        return

    if is_whitelisted(user.id):
        text = (
            "‚úÖ –ê–Ω—Ç–∏-—Å–ø–∞–º –±–æ—Ç –∑–∞–ø—É—â–µ–Ω.\n"
            "–í—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä: –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )
    else:
        text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Å–ª–µ–∂—É –∑–∞ —á–∏—Å—Ç–æ—Ç–æ–π –≤ —á–∞—Ç–µ –∏ —Ñ–∏–ª—å—Ç—Ä—É—é –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "–ï—Å–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø–∞–ª–æ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é."
        )

    await update.effective_message.reply_text(text)


async def cmd_help(update: Update, _):
    if not is_explicit_command(update):
        return

    user = update.effective_user
    if not user:
        return

    if is_whitelisted(user.id):
        await update.effective_message.reply_html(
            "üìñ <b>–ü–æ–º–æ—â—å –ø–æ –∞–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç—É</b>\n\n"
            "<b>üõ°Ô∏è –†–µ–∂–∏–º—ã –ø–æ–ª–∏—Ç–∏–∫–∏:</b>\n"
            " ‚Ä¢ <code>manual</code> ‚Äî –≤—Å—ë –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
            " ‚Ä¢ <code>semi-auto</code> ‚Äî –∞–≤—Ç–æ –ø—Ä–∏ –≤—ã—Å–æ–∫–∏—Ö –æ—Ü–µ–Ω–∫–∞—Ö\n"
            " ‚Ä¢ <code>auto</code> ‚Äî –ø–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è\n\n"
            "<b>‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>\n"
            " ‚Ä¢ <b>/status</b> ‚Äî —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
            " ‚Ä¢ <b>/debug N</b> ‚Äî –¥–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ‚ÑñN\n"
            " ‚Ä¢ <b>/meta_info</b> ‚Äî –∏–Ω—Ñ–æ –æ –º–µ—Ç–∞-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ\n\n"
            "<b>üîß –ö–æ–º–∞–Ω–¥—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:</b>\n"
            " ‚Ä¢ <b>/setpolicy &lt;—Ä–µ–∂–∏–º&gt;</b> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–ª–∏—Ç–∏–∫–∏\n"
            " ‚Ä¢ <b>/setthreshold &lt;–∏–º—è&gt; &lt;–∑–Ω–∞—á–µ–Ω–∏–µ&gt;</b> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥\n"
            " ‚Ä¢ <b>/setdownweight &lt;—Ç–∏–ø&gt; &lt;–∑–Ω–∞—á–µ–Ω–∏–µ&gt;</b> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å\n"
            " ‚Ä¢ <b>/resetconfig</b> ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –∏–∑ .env\n\n"
            "<b>üîÑ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:</b>\n"
            " ‚Ä¢ <b>/retrain</b> ‚Äî –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å TF-IDF –º–æ–¥–µ–ª—å\n"
            " ‚Ä¢ <b>/help</b> ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        )
    else:
        await update.effective_message.reply_html(
            "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n"
            "–Ø ‚Äî –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä <b>LifeMart</b>.\n"
            "–ü–æ–º–æ–≥–∞—é —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—É—é —Å–ø–∞–º.\n\n"
            "–ï—Å–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—á–µ–∑–ª–æ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É."
        )


async def cmd_meta_info(update: Update, _):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ç–∞-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ"""
    if not update.effective_user or not is_whitelisted(update.effective_user.id):
        return
    
    info = meta_classifier.get_info()
    
    status_icon = "‚úÖ" if info['ready'] else "‚ùå"
    
    message = (
        f"üéØ <b>–ú–µ—Ç–∞-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä {status_icon}</b>\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {'–ì–æ—Ç–æ–≤' if info['ready'] else '–ù–µ –æ–±—É—á–µ–Ω'}\n\n"
    )
    
    if info['ready']:
        message += (
            f"<b>üìä –ü–æ—Ä–æ–≥–∏ —Ä–µ—à–µ–Ω–∏–π:</b>\n"
            f" ‚Ä¢ Notify: <code>{runtime_config.meta_notify:.2f}</code>\n"
            f" ‚Ä¢ Delete: <code>{runtime_config.meta_delete:.2f}</code>\n"
            f" ‚Ä¢ Kick: <code>{runtime_config.meta_kick:.2f}</code>\n\n"
            f"<b>üîß –ú–æ–¥–µ–ª—å:</b>\n"
            f" ‚Ä¢ –§–∏—á–µ–π: <code>{info['num_features']}</code>\n"
            f" ‚Ä¢ –ö–∞–ª–∏–±—Ä–∞—Ç–æ—Ä: {'‚úÖ' if info['calibrator_loaded'] else '‚ùå'}\n"
            f" ‚Ä¢ –¶–µ–Ω—Ç—Ä–æ–∏–¥—ã: {'‚úÖ' if info['centroids_loaded'] else '‚ùå'}\n"
        )
        
        if 'logreg_date' in info:
            message += f" ‚Ä¢ –î–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è: <code>{info['logreg_date'][:10]}</code>\n"
        
        message += (
            f"\n<b>üìÅ –ü—É—Ç—å:</b> <code>{info['models_dir']}</code>\n\n"
            f"<i>–§–∏—á–∏: {', '.join(info['feature_names'][:5])}...</i>"
        )
    else:
        message += (
            "<b>‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞</b>\n\n"
            "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ:\n"
            "<code>python scripts/train_meta.py</code>\n\n"
            f"–ü—É—Ç—å –∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º: <code>{info['models_dir']}</code>"
        )
    
    await update.effective_message.reply_html(message)


def register_handlers(app: Application) -> None:
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("status", cmd_status))
    app.add_handler(CommandHandler("retrain", cmd_retrain))
    app.add_handler(CommandHandler("debug", cmd_debug))
    app.add_handler(CommandHandler("meta_info", cmd_meta_info))
    app.add_handler(CommandHandler("setpolicy", cmd_setpolicy))
    app.add_handler(CommandHandler("setthreshold", cmd_setthreshold))
    app.add_handler(CommandHandler("setdownweight", cmd_setdownweight))
    app.add_handler(CommandHandler("resetconfig", cmd_resetconfig))

    app.add_handler(CallbackQueryHandler(on_callback, pattern="^(kick|delete|ham):"))
    app.add_handler(MessageHandler(filters.TEXT | filters.CaptionRegex(".*"), on_message))
